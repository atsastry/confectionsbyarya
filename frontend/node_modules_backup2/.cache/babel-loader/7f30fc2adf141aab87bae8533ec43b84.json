{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executeOperation = void 0;\nvar error_1 = require(\"../error\");\nvar read_preference_1 = require(\"../read_preference\");\nvar server_selection_1 = require(\"../sdam/server_selection\");\nvar utils_1 = require(\"../utils\");\nvar operation_1 = require(\"./operation\");\nvar MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nvar MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\nfunction executeOperation(client, operation, callback) {\n  return (0, utils_1.maybeCallback)(function () {\n    return executeOperationAsync(client, operation);\n  }, callback);\n}\nexports.executeOperation = executeOperation;\nfunction executeOperationAsync(_x, _x2) {\n  return _executeOperationAsync.apply(this, arguments);\n}\nfunction _executeOperationAsync() {\n  _executeOperationAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(client, operation) {\n    var topology, session, owner, readPreference, inTransaction, selector, server, willRetryRead, willRetryWrite, hasReadAspect, hasWriteAspect, willRetry;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (operation instanceof operation_1.AbstractOperation) {\n              _context.next = 2;\n              break;\n            }\n            throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n          case 2:\n            if (!(client.topology == null)) {\n              _context.next = 12;\n              break;\n            }\n            if (!client.s.hasBeenClosed) {\n              _context.next = 5;\n              break;\n            }\n            throw new error_1.MongoNotConnectedError('Client must be connected before running operations');\n          case 5:\n            client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n            _context.prev = 6;\n            _context.next = 9;\n            return client.connect();\n          case 9:\n            _context.prev = 9;\n            delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n            return _context.finish(9);\n          case 12:\n            topology = client.topology;\n            if (!(topology == null)) {\n              _context.next = 15;\n              break;\n            }\n            throw new error_1.MongoRuntimeError('client.connect did not create a topology but also did not throw');\n          case 15:\n            // The driver sessions spec mandates that we implicitly create sessions for operations\n            // that are not explicitly provided with a session.\n            session = operation.session;\n            if (!(session == null)) {\n              _context.next = 21;\n              break;\n            }\n            owner = Symbol();\n            session = client.startSession({\n              owner: owner,\n              explicit: false\n            });\n            _context.next = 31;\n            break;\n          case 21:\n            if (!session.hasEnded) {\n              _context.next = 25;\n              break;\n            }\n            throw new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted');\n          case 25:\n            if (!(session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads)) {\n              _context.next = 29;\n              break;\n            }\n            throw new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n          case 29:\n            if (!(session.client !== client)) {\n              _context.next = 31;\n              break;\n            }\n            throw new error_1.MongoInvalidArgumentError('ClientSession must be from the same MongoClient');\n          case 31:\n            readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n            inTransaction = !!session?.inTransaction();\n            if (!(inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary))) {\n              _context.next = 35;\n              break;\n            }\n            throw new error_1.MongoTransactionError(\"Read preference in a transaction must be primary, not: \".concat(readPreference.mode));\n          case 35:\n            if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n              session.unpin();\n            }\n            if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n              // GetMore and KillCursor operations must always select the same server, but run through\n              // server selection to potentially force monitor checks if the server is\n              // in an unknown state.\n              selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n            } else if (operation.trySecondaryWrite) {\n              // If operation should try to write to secondary use the custom server selector\n              // otherwise provide the read preference.\n              selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n            } else {\n              selector = readPreference;\n            }\n            _context.next = 39;\n            return topology.selectServerAsync(selector, {\n              session: session\n            });\n          case 39:\n            server = _context.sent;\n            if (!(session == null)) {\n              _context.next = 42;\n              break;\n            }\n            return _context.abrupt(\"return\", operation.execute(server, undefined));\n          case 42:\n            if (operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n              _context.next = 52;\n              break;\n            }\n            _context.prev = 43;\n            _context.next = 46;\n            return operation.execute(server, session);\n          case 46:\n            return _context.abrupt(\"return\", _context.sent);\n          case 47:\n            _context.prev = 47;\n            if (!(session?.owner != null && session.owner === owner)) {\n              _context.next = 51;\n              break;\n            }\n            _context.next = 51;\n            return session.endSession().catch(function () {\n              return null;\n            });\n          case 51:\n            return _context.finish(47);\n          case 52:\n            willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n            willRetryWrite = topology.s.options.retryWrites && !inTransaction && (0, utils_1.supportsRetryableWrites)(server) && operation.canRetryWrite;\n            hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n            hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n            willRetry = hasReadAspect && willRetryRead || hasWriteAspect && willRetryWrite;\n            if (hasWriteAspect && willRetryWrite) {\n              operation.options.willRetryWrite = true;\n              session.incrementTransactionNumber();\n            }\n            _context.prev = 58;\n            _context.next = 61;\n            return operation.execute(server, session);\n          case 61:\n            return _context.abrupt(\"return\", _context.sent);\n          case 64:\n            _context.prev = 64;\n            _context.t0 = _context[\"catch\"](58);\n            if (!(willRetry && _context.t0 instanceof error_1.MongoError)) {\n              _context.next = 70;\n              break;\n            }\n            _context.next = 69;\n            return retryOperation(operation, _context.t0, {\n              session: session,\n              topology: topology,\n              selector: selector\n            });\n          case 69:\n            return _context.abrupt(\"return\", _context.sent);\n          case 70:\n            throw _context.t0;\n          case 71:\n            _context.prev = 71;\n            if (!(session?.owner != null && session.owner === owner)) {\n              _context.next = 75;\n              break;\n            }\n            _context.next = 75;\n            return session.endSession().catch(function () {\n              return null;\n            });\n          case 75:\n            return _context.finish(71);\n          case 76:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6,, 9, 12], [43,, 47, 52], [58, 64, 71, 76]]);\n  }));\n  return _executeOperationAsync.apply(this, arguments);\n}\nfunction retryOperation(_x3, _x4, _x5) {\n  return _retryOperation.apply(this, arguments);\n}\nfunction _retryOperation() {\n  _retryOperation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(operation, originalError, _ref) {\n    var session, topology, selector, isWriteOperation, isReadOperation, server;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            session = _ref.session, topology = _ref.topology, selector = _ref.selector;\n            isWriteOperation = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n            isReadOperation = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n            if (!(isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE)) {\n              _context2.next = 5;\n              break;\n            }\n            throw new error_1.MongoServerError({\n              message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n              errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n              originalError: originalError\n            });\n          case 5:\n            if (!(isWriteOperation && !(0, error_1.isRetryableWriteError)(originalError))) {\n              _context2.next = 7;\n              break;\n            }\n            throw originalError;\n          case 7:\n            if (!(isReadOperation && !(0, error_1.isRetryableReadError)(originalError))) {\n              _context2.next = 9;\n              break;\n            }\n            throw originalError;\n          case 9:\n            if (originalError instanceof error_1.MongoNetworkError && session.isPinned && !session.inTransaction() && operation.hasAspect(operation_1.Aspect.CURSOR_CREATING)) {\n              // If we have a cursor and the initial command fails with a network error,\n              // we can retry it on another connection. So we need to check it back in, clear the\n              // pool for the service id, and retry again.\n              session.unpin({\n                force: true,\n                forceClear: true\n              });\n            }\n            // select a new server, and attempt to retry the operation\n            _context2.next = 12;\n            return topology.selectServerAsync(selector, {\n              session: session\n            });\n          case 12:\n            server = _context2.sent;\n            if (!(isWriteOperation && !(0, utils_1.supportsRetryableWrites)(server))) {\n              _context2.next = 15;\n              break;\n            }\n            throw new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes');\n          case 15:\n            _context2.prev = 15;\n            _context2.next = 18;\n            return operation.execute(server, session);\n          case 18:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](15);\n            if (!(_context2.t0 instanceof error_1.MongoError && _context2.t0.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed))) {\n              _context2.next = 25;\n              break;\n            }\n            throw originalError;\n          case 25:\n            throw _context2.t0;\n          case 26:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[15, 21]]);\n  }));\n  return _retryOperation.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}