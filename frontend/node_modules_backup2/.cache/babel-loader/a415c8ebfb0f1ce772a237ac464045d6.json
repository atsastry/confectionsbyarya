{"ast":null,"code":"import _asyncToGenerator from \"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nvar _require = require('mongodb'),\n  MongoClient = _require.MongoClient,\n  ServerApiVersion = _require.ServerApiVersion;\nvar uri = \"mongodb+srv://recipes:bakingisfun@cluster0.tlzcb9k.mongodb.net/?retryWrites=true&w=majority\";\n\n// Create a MongoClient with a MongoClientOptions object to set the Stable API version\n// const client = new MongoClient(uri, {\n//   serverApi: {\n//     version: ServerApiVersion.v1,\n//     strict: true,\n//     deprecationErrors: true,\n//   }\n// });\nvar client = new MongoClient(uri);\n\n// async function main(){\n//     // const uri = \"mongodb+srv://<username>:<password>@<your-cluster-url>/test?retryWrites=true&w=majority\";\n//    // const client = new MongoClient(uri);\n\n//     try {\n//         // Connect to the MongoDB cluster\n//         await client.connect();\n\n//         // Make the appropriate DB calls\n//         await listDatabases(client);\n//         await getAllRecipes(client);\n\n//     } catch (e) {\n//         console.error(e);\n//     } finally {\n//         await client.close();\n//     }\n// }\nfunction listDatabases(_x) {\n  return _listDatabases.apply(this, arguments);\n}\nfunction _listDatabases() {\n  _listDatabases = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(client) {\n    var databasesList;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.db().admin().listDatabases();\n          case 2:\n            databasesList = _context.sent;\n            console.log(\"Databases:\");\n            databasesList.databases.forEach(function (db) {\n              return console.log(\" - \".concat(db.name));\n            });\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _listDatabases.apply(this, arguments);\n}\n;\nfunction getAllRecipes(_x2) {\n  return _getAllRecipes.apply(this, arguments);\n} //main().catch(console.error);\nfunction _getAllRecipes() {\n  _getAllRecipes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(client) {\n    var database, recipesCollection, recipes, result, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, recipe;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            database = client.db(\"Recipes\");\n            recipesCollection = database.collection(\"Recipes\");\n            _context2.next = 4;\n            return recipesCollection.find();\n          case 4:\n            recipes = _context2.sent;\n            console.log(recipes);\n            result = [];\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 9;\n            _iterator = _asyncIterator(recipes);\n          case 11:\n            _context2.next = 13;\n            return _iterator.next();\n          case 13:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 20;\n              break;\n            }\n            recipe = _step.value;\n            console.dir(recipe);\n            result.push(recipe);\n          case 17:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 11;\n            break;\n          case 20:\n            _context2.next = 26;\n            break;\n          case 22:\n            _context2.prev = 22;\n            _context2.t0 = _context2[\"catch\"](9);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n          case 26:\n            _context2.prev = 26;\n            _context2.prev = 27;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 31;\n              break;\n            }\n            _context2.next = 31;\n            return _iterator.return();\n          case 31:\n            _context2.prev = 31;\n            if (!_didIteratorError) {\n              _context2.next = 34;\n              break;\n            }\n            throw _iteratorError;\n          case 34:\n            return _context2.finish(31);\n          case 35:\n            return _context2.finish(26);\n          case 36:\n            return _context2.abrupt(\"return\", result);\n          case 37:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[9, 22, 26, 36], [27,, 31, 35]]);\n  }));\n  return _getAllRecipes.apply(this, arguments);\n}\nexport { client, getAllRecipes, listDatabases };","map":{"version":3,"names":["require","MongoClient","ServerApiVersion","uri","client","listDatabases","db","admin","databasesList","console","log","databases","forEach","name","getAllRecipes","database","recipesCollection","collection","find","recipes","result","recipe","dir","push"],"sources":["/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/src/Mongoclient.js"],"sourcesContent":["\nconst { MongoClient, ServerApiVersion } = require('mongodb');\nconst uri = \"mongodb+srv://recipes:bakingisfun@cluster0.tlzcb9k.mongodb.net/?retryWrites=true&w=majority\";\n\n// Create a MongoClient with a MongoClientOptions object to set the Stable API version\n// const client = new MongoClient(uri, {\n//   serverApi: {\n//     version: ServerApiVersion.v1,\n//     strict: true,\n//     deprecationErrors: true,\n//   }\n// });\nconst client = new MongoClient(uri);\n\n// async function main(){\n//     // const uri = \"mongodb+srv://<username>:<password>@<your-cluster-url>/test?retryWrites=true&w=majority\";\n//    // const client = new MongoClient(uri);\n \n//     try {\n//         // Connect to the MongoDB cluster\n//         await client.connect();\n \n//         // Make the appropriate DB calls\n//         await listDatabases(client);\n//         await getAllRecipes(client);\n \n//     } catch (e) {\n//         console.error(e);\n//     } finally {\n//         await client.close();\n//     }\n// }\n\nasync function listDatabases(client){\n    const databasesList = await client.db().admin().listDatabases();\n \n    console.log(\"Databases:\");\n    databasesList.databases.forEach(db => console.log(` - ${db.name}`));\n};\n\nasync function getAllRecipes(client) {\n    const database = client.db(\"Recipes\");\n    const recipesCollection = database.collection(\"Recipes\");\n    const recipes = await recipesCollection.find();\n\n    console.log(recipes);\n    var result = [];\n\n    for await (const recipe of recipes) {\n        console.dir(recipe);\n        result.push(recipe);\n    }\n    return result;\n}\n\n//main().catch(console.error);\n\nexport { client, getAllRecipes, listDatabases};"],"mappings":";+CACA;AAAA;AAAA;AAAA,eAA0CA,OAAO,CAAC,SAAS,CAAC;EAApDC,WAAW,YAAXA,WAAW;EAAEC,gBAAgB,YAAhBA,gBAAgB;AACrC,IAAMC,GAAG,GAAG,6FAA6F;;AAEzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,MAAM,GAAG,IAAIH,WAAW,CAACE,GAAG,CAAC;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,SAEeE,aAAa;EAAA;AAAA;AAAA;EAAA,4EAA5B,iBAA6BD,MAAM;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACHA,MAAM,CAACE,EAAE,EAAE,CAACC,KAAK,EAAE,CAACF,aAAa,EAAE;UAAA;YAAzDG,aAAa;YAEnBC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;YACzBF,aAAa,CAACG,SAAS,CAACC,OAAO,CAAC,UAAAN,EAAE;cAAA,OAAIG,OAAO,CAACC,GAAG,cAAOJ,EAAE,CAACO,IAAI,EAAG;YAAA,EAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvE;EAAA;AAAA;AAAA;AAAC,SAEaC,aAAa;EAAA;AAAA,EAe5B;AAAA;EAAA,4EAfA,kBAA6BV,MAAM;IAAA;IAAA;MAAA;QAAA;UAAA;YACzBW,QAAQ,GAAGX,MAAM,CAACE,EAAE,CAAC,SAAS,CAAC;YAC/BU,iBAAiB,GAAGD,QAAQ,CAACE,UAAU,CAAC,SAAS,CAAC;YAAA;YAAA,OAClCD,iBAAiB,CAACE,IAAI,EAAE;UAAA;YAAxCC,OAAO;YAEbV,OAAO,CAACC,GAAG,CAACS,OAAO,CAAC;YAChBC,MAAM,GAAG,EAAE;YAAA;YAAA;YAAA;YAAA,2BAEYD,OAAO;UAAA;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAAjBE,MAAM;YACnBZ,OAAO,CAACa,GAAG,CAACD,MAAM,CAAC;YACnBD,MAAM,CAACG,IAAI,CAACF,MAAM,CAAC;UAAC;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;UAAA;YAAA;UAAA;YAAA,kCAEjBD,MAAM;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAChB;EAAA;AAAA;AAID,SAAShB,MAAM,EAAEU,aAAa,EAAET,aAAa"},"metadata":{},"sourceType":"module"}