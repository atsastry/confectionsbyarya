{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _objectSpread = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\nvar _getPrototypeOf = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\nvar bson_1 = require(\"../bson\");\nvar error_1 = require(\"../error\");\nvar count_1 = require(\"../operations/count\");\nvar execute_operation_1 = require(\"../operations/execute_operation\");\nvar find_1 = require(\"../operations/find\");\nvar sort_1 = require(\"../sort\");\nvar utils_1 = require(\"../utils\");\nvar abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nvar kFilter = Symbol('filter');\n/** @internal */\nvar kNumReturned = Symbol('numReturned');\n/** @internal */\nvar kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nvar FindCursor = /*#__PURE__*/function (_abstract_cursor_1$Ab) {\n  _inherits(FindCursor, _abstract_cursor_1$Ab);\n  /** @internal */\n  function FindCursor(client, namespace) {\n    var _this;\n    var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, FindCursor);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FindCursor).call(this, client, namespace, options));\n    _this[kFilter] = filter;\n    _this[kBuiltOptions] = options;\n    if (options.sort != null) {\n      _this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n    }\n    return _this;\n  }\n  _createClass(FindCursor, [{\n    key: \"clone\",\n    value: function clone() {\n      var clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n      delete clonedOptions.session;\n      return new FindCursor(this.client, this.namespace, this[kFilter], _objectSpread({}, clonedOptions));\n    }\n  }, {\n    key: \"map\",\n    value: function map(transform) {\n      return _get(_getPrototypeOf(FindCursor.prototype), \"map\", this).call(this, transform);\n    } /** @internal */\n  }, {\n    key: \"_initialize\",\n    value: function () {\n      var _initialize2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(session) {\n        var findOperation, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], _objectSpread({}, this[kBuiltOptions], this.cursorOptions, {\n                  session: session\n                }));\n                _context.next = 3;\n                return (0, execute_operation_1.executeOperation)(this.client, findOperation);\n              case 3:\n                response = _context.sent;\n                // the response is not a cursor when `explain` is enabled\n                this[kNumReturned] = response.cursor?.firstBatch?.length;\n                // TODO: NODE-2882\n                return _context.abrupt(\"return\", {\n                  server: findOperation.server,\n                  session: session,\n                  response: response\n                });\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function _initialize(_x) {\n        return _initialize2.apply(this, arguments);\n      }\n      return _initialize;\n    }() /** @internal */\n  }, {\n    key: \"getMore\",\n    value: function () {\n      var _getMore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(batchSize) {\n        var numReturned, limit, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                numReturned = this[kNumReturned];\n                if (!numReturned) {\n                  _context2.next = 8;\n                  break;\n                }\n                // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n                limit = this[kBuiltOptions].limit;\n                batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n                if (!(batchSize <= 0)) {\n                  _context2.next = 8;\n                  break;\n                }\n                _context2.next = 7;\n                return this.close().catch(function () {\n                  return null;\n                });\n              case 7:\n                return _context2.abrupt(\"return\", {\n                  cursor: {\n                    id: bson_1.Long.ZERO,\n                    nextBatch: []\n                  }\n                });\n              case 8:\n                _context2.next = 10;\n                return _get(_getPrototypeOf(FindCursor.prototype), \"getMore\", this).call(this, batchSize);\n              case 10:\n                response = _context2.sent;\n                // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n                if (response) {\n                  this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n                }\n                return _context2.abrupt(\"return\", response);\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getMore(_x2) {\n        return _getMore.apply(this, arguments);\n      }\n      return getMore;\n    }()\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n  }, {\n    key: \"count\",\n    value: function () {\n      var _count = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(options) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n                if (!(typeof options === 'boolean')) {\n                  _context3.next = 3;\n                  break;\n                }\n                throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n              case 3:\n                return _context3.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], _objectSpread({}, this[kBuiltOptions], this.cursorOptions, options))));\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function count(_x3) {\n        return _count.apply(this, arguments);\n      }\n      return count;\n    }() /** Execute the explain for the cursor */\n  }, {\n    key: \"explain\",\n    value: function () {\n      var _explain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(verbosity) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], _objectSpread({}, this[kBuiltOptions], this.cursorOptions, {\n                  explain: verbosity ?? true\n                }))));\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function explain(_x4) {\n        return _explain.apply(this, arguments);\n      }\n      return explain;\n    }() /** Set the cursor query */\n  }, {\n    key: \"filter\",\n    value: function filter(_filter) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kFilter] = _filter;\n      return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n  }, {\n    key: \"hint\",\n    value: function hint(_hint) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].hint = _hint;\n      return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n  }, {\n    key: \"min\",\n    value: function min(_min) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].min = _min;\n      return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n  }, {\n    key: \"max\",\n    value: function max(_max) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].max = _max;\n      return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n  }, {\n    key: \"returnKey\",\n    value: function returnKey(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].returnKey = value;\n      return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n  }, {\n    key: \"showRecordId\",\n    value: function showRecordId(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].showRecordId = value;\n      return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n  }, {\n    key: \"addQueryModifier\",\n    value: function addQueryModifier(name, value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (name[0] !== '$') {\n        throw new error_1.MongoInvalidArgumentError(\"\".concat(name, \" is not a valid query modifier\"));\n      }\n      // Strip of the $\n      var field = name.substr(1);\n      // NOTE: consider some TS magic for this\n      switch (field) {\n        case 'comment':\n          this[kBuiltOptions].comment = value;\n          break;\n        case 'explain':\n          this[kBuiltOptions].explain = value;\n          break;\n        case 'hint':\n          this[kBuiltOptions].hint = value;\n          break;\n        case 'max':\n          this[kBuiltOptions].max = value;\n          break;\n        case 'maxTimeMS':\n          this[kBuiltOptions].maxTimeMS = value;\n          break;\n        case 'min':\n          this[kBuiltOptions].min = value;\n          break;\n        case 'orderby':\n          this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n          break;\n        case 'query':\n          this[kFilter] = value;\n          break;\n        case 'returnKey':\n          this[kBuiltOptions].returnKey = value;\n          break;\n        case 'showDiskLoc':\n          this[kBuiltOptions].showRecordId = value;\n          break;\n        default:\n          throw new error_1.MongoInvalidArgumentError(\"Invalid query modifier: \".concat(name));\n      }\n      return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n  }, {\n    key: \"comment\",\n    value: function comment(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].comment = value;\n      return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n  }, {\n    key: \"maxAwaitTimeMS\",\n    value: function maxAwaitTimeMS(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n      }\n      this[kBuiltOptions].maxAwaitTimeMS = value;\n      return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n  }, {\n    key: \"maxTimeMS\",\n    value: function maxTimeMS(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n      }\n      this[kBuiltOptions].maxTimeMS = value;\n      return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n  }, {\n    key: \"project\",\n    value: function project(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].projection = value;\n      return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n  }, {\n    key: \"sort\",\n    value: function sort(_sort, direction) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n      }\n      this[kBuiltOptions].sort = (0, sort_1.formatSort)(_sort, direction);\n      return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n  }, {\n    key: \"allowDiskUse\",\n    value: function allowDiskUse() {\n      var allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (!this[kBuiltOptions].sort) {\n        throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n      }\n      // As of 6.0 the default is true. This allows users to get back to the old behavior.\n      if (!allow) {\n        this[kBuiltOptions].allowDiskUse = false;\n        return this;\n      }\n      this[kBuiltOptions].allowDiskUse = true;\n      return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n  }, {\n    key: \"collation\",\n    value: function collation(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].collation = value;\n      return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n  }, {\n    key: \"limit\",\n    value: function limit(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n      }\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n      }\n      this[kBuiltOptions].limit = value;\n      return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n  }, {\n    key: \"skip\",\n    value: function skip(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n      }\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n      }\n      this[kBuiltOptions].skip = value;\n      return this;\n    }\n  }]);\n  return FindCursor;\n}(abstract_cursor_1.AbstractCursor);\nexports.FindCursor = FindCursor;","map":null,"metadata":{},"sourceType":"script"}