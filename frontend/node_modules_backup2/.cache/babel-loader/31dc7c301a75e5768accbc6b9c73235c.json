{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\nvar _extends = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/extends\");\nvar _asyncToGenerator = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _objectSpread = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientEncryption = void 0;\nvar bson_1 = require(\"../bson\");\nvar deps_1 = require(\"../deps\");\nvar utils_1 = require(\"../utils\");\nvar cryptoCallbacks = require(\"./crypto_callbacks\");\nvar errors_1 = require(\"./errors\");\nvar index_1 = require(\"./providers/index\");\nvar state_machine_1 = require(\"./state_machine\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nvar ClientEncryption = /*#__PURE__*/function () {\n  _createClass(ClientEncryption, null, [{\n    key: \"getMongoCrypt\",\n    /** @internal */value: function getMongoCrypt() {\n      var encryption = (0, deps_1.getMongoDBClientEncryption)();\n      if ('kModuleError' in encryption) {\n        throw encryption.kModuleError;\n      }\n      return encryption.MongoCrypt;\n    }\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */\n  }]);\n  function ClientEncryption(client, options) {\n    _classCallCheck(this, ClientEncryption);\n    this._client = client;\n    this._proxyOptions = options.proxyOptions ?? {};\n    this._tlsOptions = options.tlsOptions ?? {};\n    this._kmsProviders = options.kmsProviders || {};\n    if (options.keyVaultNamespace == null) {\n      throw new errors_1.MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');\n    }\n    var mongoCryptOptions = _objectSpread({}, options, {\n      cryptoCallbacks: cryptoCallbacks,\n      kmsProviders: !Buffer.isBuffer(this._kmsProviders) ? (0, bson_1.serialize)(this._kmsProviders) : this._kmsProviders\n    });\n    this._keyVaultNamespace = options.keyVaultNamespace;\n    this._keyVaultClient = options.keyVaultClient || client;\n    var MongoCrypt = ClientEncryption.getMongoCrypt();\n    this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n  }\n  /**\n   * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n   *\n   * @example\n   * ```ts\n   * // Using async/await to create a local key\n   * const dataKeyId = await clientEncryption.createDataKey('local');\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Using async/await to create an aws key\n   * const dataKeyId = await clientEncryption.createDataKey('aws', {\n   *   masterKey: {\n   *     region: 'us-east-1',\n   *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n   *   }\n   * });\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Using async/await to create an aws key with a keyAltName\n   * const dataKeyId = await clientEncryption.createDataKey('aws', {\n   *   masterKey: {\n   *     region: 'us-east-1',\n   *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n   *   },\n   *   keyAltNames: [ 'mySpecialKey' ]\n   * });\n   * ```\n   */\n  _createClass(ClientEncryption, [{\n    key: \"createDataKey\",\n    value: function () {\n      var _createDataKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider) {\n        var options,\n          keyAltNames,\n          keyMaterial,\n          dataKeyBson,\n          context,\n          stateMachine,\n          dataKey,\n          _utils_1$MongoDBColle,\n          dbName,\n          collectionName,\n          _yield$this$_keyVault,\n          insertedId,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                if (!(options.keyAltNames && !Array.isArray(options.keyAltNames))) {\n                  _context.next = 3;\n                  break;\n                }\n                throw new errors_1.MongoCryptInvalidArgumentError(\"Option \\\"keyAltNames\\\" must be an array of strings, but was of type \".concat(typeof options.keyAltNames, \".\"));\n              case 3:\n                keyAltNames = undefined;\n                if (options.keyAltNames && options.keyAltNames.length > 0) {\n                  keyAltNames = options.keyAltNames.map(function (keyAltName, i) {\n                    if (typeof keyAltName !== 'string') {\n                      throw new errors_1.MongoCryptInvalidArgumentError(\"Option \\\"keyAltNames\\\" must be an array of strings, but item at index \".concat(i, \" was of type \").concat(typeof keyAltName));\n                    }\n                    return (0, bson_1.serialize)({\n                      keyAltName: keyAltName\n                    });\n                  });\n                }\n                keyMaterial = undefined;\n                if (options.keyMaterial) {\n                  keyMaterial = (0, bson_1.serialize)({\n                    keyMaterial: options.keyMaterial\n                  });\n                }\n                dataKeyBson = (0, bson_1.serialize)(_objectSpread({\n                  provider: provider\n                }, options.masterKey));\n                context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n                  keyAltNames: keyAltNames,\n                  keyMaterial: keyMaterial\n                });\n                stateMachine = new state_machine_1.StateMachine({\n                  proxyOptions: this._proxyOptions,\n                  tlsOptions: this._tlsOptions\n                });\n                _context.next = 12;\n                return stateMachine.execute(this, context);\n              case 12:\n                dataKey = _context.sent;\n                _utils_1$MongoDBColle = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _utils_1$MongoDBColle.db, collectionName = _utils_1$MongoDBColle.collection;\n                _context.next = 16;\n                return this._keyVaultClient.db(dbName).collection(collectionName).insertOne(dataKey, {\n                  writeConcern: {\n                    w: 'majority'\n                  }\n                });\n              case 16:\n                _yield$this$_keyVault = _context.sent;\n                insertedId = _yield$this$_keyVault.insertedId;\n                return _context.abrupt(\"return\", insertedId);\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function createDataKey(_x) {\n        return _createDataKey.apply(this, arguments);\n      }\n      return createDataKey;\n    }()\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */\n  }, {\n    key: \"rewrapManyDataKey\",\n    value: function () {\n      var _rewrapManyDataKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(filter, options) {\n        var keyEncryptionKeyBson, keyEncryptionKey, filterBson, context, stateMachine, _yield$stateMachine$e, dataKeys, _utils_1$MongoDBColle2, dbName, collectionName, replacements, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                keyEncryptionKeyBson = undefined;\n                if (options) {\n                  keyEncryptionKey = Object.assign({\n                    provider: options.provider\n                  }, options.masterKey);\n                  keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n                }\n                filterBson = (0, bson_1.serialize)(filter);\n                context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n                stateMachine = new state_machine_1.StateMachine({\n                  proxyOptions: this._proxyOptions,\n                  tlsOptions: this._tlsOptions\n                });\n                _context2.next = 7;\n                return stateMachine.execute(this, context);\n              case 7:\n                _yield$stateMachine$e = _context2.sent;\n                dataKeys = _yield$stateMachine$e.v;\n                if (!(dataKeys.length === 0)) {\n                  _context2.next = 11;\n                  break;\n                }\n                return _context2.abrupt(\"return\", {});\n              case 11:\n                _utils_1$MongoDBColle2 = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _utils_1$MongoDBColle2.db, collectionName = _utils_1$MongoDBColle2.collection;\n                replacements = dataKeys.map(function (key) {\n                  return {\n                    updateOne: {\n                      filter: {\n                        _id: key._id\n                      },\n                      update: {\n                        $set: {\n                          masterKey: key.masterKey,\n                          keyMaterial: key.keyMaterial\n                        },\n                        $currentDate: {\n                          updateDate: true\n                        }\n                      }\n                    }\n                  };\n                });\n                _context2.next = 15;\n                return this._keyVaultClient.db(dbName).collection(collectionName).bulkWrite(replacements, {\n                  writeConcern: {\n                    w: 'majority'\n                  }\n                });\n              case 15:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  bulkWriteResult: result\n                });\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function rewrapManyDataKey(_x2, _x3) {\n        return _rewrapManyDataKey.apply(this, arguments);\n      }\n      return rewrapManyDataKey;\n    }()\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */\n  }, {\n    key: \"deleteKey\",\n    value: function () {\n      var _deleteKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_id) {\n        var _utils_1$MongoDBColle3, dbName, collectionName;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _utils_1$MongoDBColle3 = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _utils_1$MongoDBColle3.db, collectionName = _utils_1$MongoDBColle3.collection;\n                return _context3.abrupt(\"return\", this._keyVaultClient.db(dbName).collection(collectionName).deleteOne({\n                  _id: _id\n                }, {\n                  writeConcern: {\n                    w: 'majority'\n                  }\n                }));\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function deleteKey(_x4) {\n        return _deleteKey.apply(this, arguments);\n      }\n      return deleteKey;\n    }()\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      var _utils_1$MongoDBColle4 = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace),\n        dbName = _utils_1$MongoDBColle4.db,\n        collectionName = _utils_1$MongoDBColle4.collection;\n      return this._keyVaultClient.db(dbName).collection(collectionName).find({}, {\n        readConcern: {\n          level: 'majority'\n        }\n      });\n    }\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */\n  }, {\n    key: \"getKey\",\n    value: function () {\n      var _getKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_id) {\n        var _utils_1$MongoDBColle5, dbName, collectionName;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _utils_1$MongoDBColle5 = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _utils_1$MongoDBColle5.db, collectionName = _utils_1$MongoDBColle5.collection;\n                return _context4.abrupt(\"return\", this._keyVaultClient.db(dbName).collection(collectionName).findOne({\n                  _id: _id\n                }, {\n                  readConcern: {\n                    level: 'majority'\n                  }\n                }));\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function getKey(_x5) {\n        return _getKey.apply(this, arguments);\n      }\n      return getKey;\n    }()\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */\n  }, {\n    key: \"getKeyByAltName\",\n    value: function () {\n      var _getKeyByAltName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(keyAltName) {\n        var _utils_1$MongoDBColle6, dbName, collectionName;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _utils_1$MongoDBColle6 = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _utils_1$MongoDBColle6.db, collectionName = _utils_1$MongoDBColle6.collection;\n                return _context5.abrupt(\"return\", this._keyVaultClient.db(dbName).collection(collectionName).findOne({\n                  keyAltNames: keyAltName\n                }, {\n                  readConcern: {\n                    level: 'majority'\n                  }\n                }));\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getKeyByAltName(_x6) {\n        return _getKeyByAltName.apply(this, arguments);\n      }\n      return getKeyByAltName;\n    }()\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n  }, {\n    key: \"addKeyAltName\",\n    value: function () {\n      var _addKeyAltName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_id, keyAltName) {\n        var _utils_1$MongoDBColle7, dbName, collectionName, value;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _utils_1$MongoDBColle7 = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _utils_1$MongoDBColle7.db, collectionName = _utils_1$MongoDBColle7.collection;\n                _context6.next = 3;\n                return this._keyVaultClient.db(dbName).collection(collectionName).findOneAndUpdate({\n                  _id: _id\n                }, {\n                  $addToSet: {\n                    keyAltNames: keyAltName\n                  }\n                }, {\n                  writeConcern: {\n                    w: 'majority'\n                  },\n                  returnDocument: 'before'\n                });\n              case 3:\n                value = _context6.sent;\n                return _context6.abrupt(\"return\", value);\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function addKeyAltName(_x7, _x8) {\n        return _addKeyAltName.apply(this, arguments);\n      }\n      return addKeyAltName;\n    }()\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n  }, {\n    key: \"removeKeyAltName\",\n    value: function () {\n      var _removeKeyAltName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(_id, keyAltName) {\n        var _utils_1$MongoDBColle8, dbName, collectionName, pipeline, value;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _utils_1$MongoDBColle8 = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace), dbName = _utils_1$MongoDBColle8.db, collectionName = _utils_1$MongoDBColle8.collection;\n                pipeline = [{\n                  $set: {\n                    keyAltNames: {\n                      $cond: [{\n                        $eq: ['$keyAltNames', [keyAltName]]\n                      }, '$$REMOVE', {\n                        $filter: {\n                          input: '$keyAltNames',\n                          cond: {\n                            $ne: ['$$this', keyAltName]\n                          }\n                        }\n                      }]\n                    }\n                  }\n                }];\n                _context7.next = 4;\n                return this._keyVaultClient.db(dbName).collection(collectionName).findOneAndUpdate({\n                  _id: _id\n                }, pipeline, {\n                  writeConcern: {\n                    w: 'majority'\n                  },\n                  returnDocument: 'before'\n                });\n              case 4:\n                value = _context7.sent;\n                return _context7.abrupt(\"return\", value);\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function removeKeyAltName(_x9, _x10) {\n        return _removeKeyAltName.apply(this, arguments);\n      }\n      return removeKeyAltName;\n    }()\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */\n  }, {\n    key: \"createEncryptedCollection\",\n    value: function () {\n      var _createEncryptedCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(db, name, options) {\n        var _this = this;\n        var provider, masterKey, _options$createCollec, encryptedFields, createCollectionOptions, createDataKeyPromises, createDataKeyResolutions, rejection, collection;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                provider = options.provider, masterKey = options.masterKey, _options$createCollec = options.createCollectionOptions, encryptedFields = _extends({}, _options$createCollec.encryptedFields), createCollectionOptions = _objectWithoutProperties(_options$createCollec, [\"encryptedFields\"]);\n                if (!Array.isArray(encryptedFields.fields)) {\n                  _context9.next = 10;\n                  break;\n                }\n                createDataKeyPromises = encryptedFields.fields.map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(field) {\n                    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                      while (1) {\n                        switch (_context8.prev = _context8.next) {\n                          case 0:\n                            if (!(field == null || typeof field !== 'object' || field.keyId != null)) {\n                              _context8.next = 4;\n                              break;\n                            }\n                            _context8.t0 = field;\n                            _context8.next = 12;\n                            break;\n                          case 4:\n                            _context8.t1 = _objectSpread;\n                            _context8.t2 = {};\n                            _context8.t3 = field;\n                            _context8.next = 9;\n                            return _this.createDataKey(provider, {\n                              masterKey: masterKey\n                            });\n                          case 9:\n                            _context8.t4 = _context8.sent;\n                            _context8.t5 = {\n                              keyId: _context8.t4\n                            };\n                            _context8.t0 = (0, _context8.t1)(_context8.t2, _context8.t3, _context8.t5);\n                          case 12:\n                            return _context8.abrupt(\"return\", _context8.t0);\n                          case 13:\n                          case \"end\":\n                            return _context8.stop();\n                        }\n                      }\n                    }, _callee8);\n                  }));\n                  return function (_x14) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n                _context9.next = 5;\n                return Promise.allSettled(createDataKeyPromises);\n              case 5:\n                createDataKeyResolutions = _context9.sent;\n                encryptedFields.fields = createDataKeyResolutions.map(function (resolution, index) {\n                  return resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index];\n                });\n                rejection = createDataKeyResolutions.find(function (result) {\n                  return result.status === 'rejected';\n                });\n                if (!(rejection != null)) {\n                  _context9.next = 10;\n                  break;\n                }\n                throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, {\n                  cause: rejection.reason\n                });\n              case 10:\n                _context9.prev = 10;\n                _context9.next = 13;\n                return db.createCollection(name, _objectSpread({}, createCollectionOptions, {\n                  encryptedFields: encryptedFields\n                }));\n              case 13:\n                collection = _context9.sent;\n                return _context9.abrupt(\"return\", {\n                  collection: collection,\n                  encryptedFields: encryptedFields\n                });\n              case 17:\n                _context9.prev = 17;\n                _context9.t0 = _context9[\"catch\"](10);\n                throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, {\n                  cause: _context9.t0\n                });\n              case 20:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[10, 17]]);\n      }));\n      function createEncryptedCollection(_x11, _x12, _x13) {\n        return _createEncryptedCollection.apply(this, arguments);\n      }\n      return createEncryptedCollection;\n    }()\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */\n  }, {\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(value, options) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this._encrypt(value, false, options));\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function encrypt(_x15, _x16) {\n        return _encrypt2.apply(this, arguments);\n      }\n      return encrypt;\n    }()\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"rangePreview\" and algorithm is \"RangePreview\".\n     *\n     * @experimental The Range algorithm is experimental only. It is not intended for production use. It is subject to breaking changes.\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */\n  }, {\n    key: \"encryptExpression\",\n    value: function () {\n      var _encryptExpression = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(expression, options) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this._encrypt(expression, true, options));\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function encryptExpression(_x17, _x18) {\n        return _encryptExpression.apply(this, arguments);\n      }\n      return encryptExpression;\n    }()\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(value) {\n        var valueBuffer, context, stateMachine, _yield$stateMachine$e2, v;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                valueBuffer = (0, bson_1.serialize)({\n                  v: value\n                });\n                context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n                stateMachine = new state_machine_1.StateMachine({\n                  proxyOptions: this._proxyOptions,\n                  tlsOptions: this._tlsOptions\n                });\n                _context12.next = 5;\n                return stateMachine.execute(this, context);\n              case 5:\n                _yield$stateMachine$e2 = _context12.sent;\n                v = _yield$stateMachine$e2.v;\n                return _context12.abrupt(\"return\", v);\n              case 8:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function decrypt(_x19) {\n        return _decrypt.apply(this, arguments);\n      }\n      return decrypt;\n    }()\n    /**\n     * @internal\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n  }, {\n    key: \"askForKMSCredentials\",\n    value: function () {\n      var _askForKMSCredentials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                return _context13.abrupt(\"return\", (0, index_1.refreshKMSCredentials)(this._kmsProviders));\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function askForKMSCredentials() {\n        return _askForKMSCredentials.apply(this, arguments);\n      }\n      return askForKMSCredentials;\n    }()\n  }, {\n    key: \"_encrypt\",\n    /**\n     * @internal\n     * A helper that perform explicit encryption of values and expressions.\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n     * @param options - options to pass to encrypt\n     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n     *          value will be a bson document.  When false, the value will be a BSON Binary.\n     *\n     */\n    value: function () {\n      var _encrypt3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(value, expressionMode, options) {\n        var algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions, contextOptions, valueBuffer, stateMachine, context, result;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                algorithm = options.algorithm, keyId = options.keyId, keyAltName = options.keyAltName, contentionFactor = options.contentionFactor, queryType = options.queryType, rangeOptions = options.rangeOptions;\n                contextOptions = {\n                  expressionMode: expressionMode,\n                  algorithm: algorithm\n                };\n                if (keyId) {\n                  contextOptions.keyId = keyId.buffer;\n                }\n                if (!keyAltName) {\n                  _context14.next = 9;\n                  break;\n                }\n                if (!keyId) {\n                  _context14.next = 6;\n                  break;\n                }\n                throw new errors_1.MongoCryptInvalidArgumentError(\"\\\"options\\\" cannot contain both \\\"keyId\\\" and \\\"keyAltName\\\"\");\n              case 6:\n                if (!(typeof keyAltName !== 'string')) {\n                  _context14.next = 8;\n                  break;\n                }\n                throw new errors_1.MongoCryptInvalidArgumentError(\"\\\"options.keyAltName\\\" must be of type string, but was of type \".concat(typeof keyAltName));\n              case 8:\n                contextOptions.keyAltName = (0, bson_1.serialize)({\n                  keyAltName: keyAltName\n                });\n              case 9:\n                if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {\n                  contextOptions.contentionFactor = contentionFactor;\n                }\n                if (typeof queryType === 'string') {\n                  contextOptions.queryType = queryType;\n                }\n                if (typeof rangeOptions === 'object') {\n                  contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n                }\n                valueBuffer = (0, bson_1.serialize)({\n                  v: value\n                });\n                stateMachine = new state_machine_1.StateMachine({\n                  proxyOptions: this._proxyOptions,\n                  tlsOptions: this._tlsOptions\n                });\n                context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n                _context14.next = 17;\n                return stateMachine.execute(this, context);\n              case 17:\n                result = _context14.sent;\n                return _context14.abrupt(\"return\", result.v);\n              case 19:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function _encrypt(_x20, _x21, _x22) {\n        return _encrypt3.apply(this, arguments);\n      }\n      return _encrypt;\n    }()\n  }], [{\n    key: \"libmongocryptVersion\",\n    get: function get() {\n      return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n    }\n  }]);\n  return ClientEncryption;\n}();\nexports.ClientEncryption = ClientEncryption;","map":null,"metadata":{},"sourceType":"script"}