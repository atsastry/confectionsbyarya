{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _objectSpread = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nvar _awaitAsyncGenerator = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\nvar _wrapAsyncGenerator = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nvar stream_1 = require(\"stream\");\nvar bson_1 = require(\"../bson\");\nvar error_1 = require(\"../error\");\nvar mongo_types_1 = require(\"../mongo_types\");\nvar execute_operation_1 = require(\"../operations/execute_operation\");\nvar get_more_1 = require(\"../operations/get_more\");\nvar kill_cursors_1 = require(\"../operations/kill_cursors\");\nvar read_concern_1 = require(\"../read_concern\");\nvar read_preference_1 = require(\"../read_preference\");\nvar sessions_1 = require(\"../sessions\");\nvar utils_1 = require(\"../utils\");\n/** @internal */\nvar kId = Symbol('id');\n/** @internal */\nvar kDocuments = Symbol('documents');\n/** @internal */\nvar kServer = Symbol('server');\n/** @internal */\nvar kNamespace = Symbol('namespace');\n/** @internal */\nvar kClient = Symbol('client');\n/** @internal */\nvar kSession = Symbol('session');\n/** @internal */\nvar kOptions = Symbol('options');\n/** @internal */\nvar kTransform = Symbol('transform');\n/** @internal */\nvar kInitialized = Symbol('initialized');\n/** @internal */\nvar kClosed = Symbol('closed');\n/** @internal */\nvar kKilled = Symbol('killed');\n/** @internal */\nvar kInit = Symbol('kInit');\n/** @public */\nexports.CURSOR_FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nvar AbstractCursor = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(AbstractCursor, _mongo_types_1$TypedE);\n  /** @internal */\n  function AbstractCursor(client, namespace) {\n    var _this2;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, AbstractCursor);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(AbstractCursor).call(this));\n    if (!client.s.isMongoClient) {\n      throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n    }\n    _this2[kClient] = client;\n    _this2[kNamespace] = namespace;\n    _this2[kId] = null;\n    _this2[kDocuments] = new utils_1.List();\n    _this2[kInitialized] = false;\n    _this2[kClosed] = false;\n    _this2[kKilled] = false;\n    _this2[kOptions] = _objectSpread({\n      readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference ? options.readPreference : read_preference_1.ReadPreference.primary\n    }, (0, bson_1.pluckBSONSerializeOptions)(options));\n    var readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n      _this2[kOptions].readConcern = readConcern;\n    }\n    if (typeof options.batchSize === 'number') {\n      _this2[kOptions].batchSize = options.batchSize;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      _this2[kOptions].comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n      _this2[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n    if (typeof options.maxAwaitTimeMS === 'number') {\n      _this2[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\n    }\n    if (options.session instanceof sessions_1.ClientSession) {\n      _this2[kSession] = options.session;\n    } else {\n      _this2[kSession] = _this2[kClient].startSession({\n        owner: _assertThisInitialized(_assertThisInitialized(_this2)),\n        explicit: false\n      });\n    }\n    return _this2;\n  }\n  _createClass(AbstractCursor, [{\n    key: \"bufferedCount\",\n    /** Returns current buffered documents length */value: function bufferedCount() {\n      return this[kDocuments].length;\n    } /** Returns current buffered documents */\n  }, {\n    key: \"readBufferedDocuments\",\n    value: function readBufferedDocuments(number) {\n      var bufferedDocs = [];\n      var documentsToRead = Math.min(number ?? this[kDocuments].length, this[kDocuments].length);\n      for (var count = 0; count < documentsToRead; count++) {\n        var document = this[kDocuments].shift();\n        if (document != null) {\n          bufferedDocs.push(document);\n        }\n      }\n      return bufferedDocs;\n    }\n  }, {\n    key: Symbol.asyncIterator,\n    value: function value() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var document, message;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this.closed) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 2:\n                _context.prev = 2;\n              case 3:\n                if (!true) {\n                  _context.next = 20;\n                  break;\n                }\n                _context.next = 6;\n                return _awaitAsyncGenerator(_this.next());\n              case 6:\n                document = _context.sent;\n                if (!(document === null)) {\n                  _context.next = 14;\n                  break;\n                }\n                if (_this.closed) {\n                  _context.next = 13;\n                  break;\n                }\n                message = 'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n                _context.next = 12;\n                return _awaitAsyncGenerator(cleanupCursor(_this, {\n                  needsToEmitClosed: true\n                }).catch(function () {\n                  return null;\n                }));\n              case 12:\n                throw new error_1.MongoAPIError(message);\n              case 13:\n                return _context.abrupt(\"break\", 20);\n              case 14:\n                _context.next = 16;\n                return document;\n              case 16:\n                if (!(_this[kId] === bson_1.Long.ZERO)) {\n                  _context.next = 18;\n                  break;\n                }\n                return _context.abrupt(\"break\", 20);\n              case 18:\n                _context.next = 3;\n                break;\n              case 20:\n                _context.prev = 20;\n                if (_this.closed) {\n                  _context.next = 24;\n                  break;\n                }\n                _context.next = 24;\n                return _awaitAsyncGenerator(_this.close().catch(function () {\n                  return null;\n                }));\n              case 24:\n                return _context.finish(20);\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2,, 20, 25]]);\n      }))();\n    }\n  }, {\n    key: \"stream\",\n    value: function stream(options) {\n      if (options?.transform) {\n        var _transform = options.transform;\n        var readable = new ReadableCursorStream(this);\n        return readable.pipe(new stream_1.Transform({\n          objectMode: true,\n          highWaterMark: 1,\n          transform: function transform(chunk, _, callback) {\n            try {\n              var transformed = _transform(chunk);\n              callback(undefined, transformed);\n            } catch (err) {\n              callback(err);\n            }\n          }\n        }));\n      }\n      return new ReadableCursorStream(this);\n    }\n  }, {\n    key: \"hasNext\",\n    value: function () {\n      var _hasNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var doc;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this[kId] === bson_1.Long.ZERO)) {\n                  _context2.next = 2;\n                  break;\n                }\n                return _context2.abrupt(\"return\", false);\n              case 2:\n                if (!(this[kDocuments].length !== 0)) {\n                  _context2.next = 4;\n                  break;\n                }\n                return _context2.abrupt(\"return\", true);\n              case 4:\n                _context2.next = 6;\n                return _next(this, {\n                  blocking: true,\n                  transform: false\n                });\n              case 6:\n                doc = _context2.sent;\n                if (!doc) {\n                  _context2.next = 10;\n                  break;\n                }\n                this[kDocuments].unshift(doc);\n                return _context2.abrupt(\"return\", true);\n              case 10:\n                return _context2.abrupt(\"return\", false);\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function hasNext() {\n        return _hasNext.apply(this, arguments);\n      }\n      return hasNext;\n    }() /** Get the next available document from the cursor, returns null if no more documents are available. */\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this[kId] === bson_1.Long.ZERO)) {\n                  _context3.next = 2;\n                  break;\n                }\n                throw new error_1.MongoCursorExhaustedError();\n              case 2:\n                return _context3.abrupt(\"return\", _next(this, {\n                  blocking: true,\n                  transform: true\n                }));\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function next() {\n        return _next2.apply(this, arguments);\n      }\n      return next;\n    }()\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n  }, {\n    key: \"tryNext\",\n    value: function () {\n      var _tryNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this[kId] === bson_1.Long.ZERO)) {\n                  _context4.next = 2;\n                  break;\n                }\n                throw new error_1.MongoCursorExhaustedError();\n              case 2:\n                return _context4.abrupt(\"return\", _next(this, {\n                  blocking: false,\n                  transform: true\n                }));\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function tryNext() {\n        return _tryNext.apply(this, arguments);\n      }\n      return tryNext;\n    }()\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */\n  }, {\n    key: \"forEach\",\n    value: function () {\n      var _forEach = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(iterator) {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, document, result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(typeof iterator !== 'function')) {\n                  _context5.next = 2;\n                  break;\n                }\n                throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n              case 2:\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context5.prev = 4;\n                _iterator = _asyncIterator(this);\n              case 6:\n                _context5.next = 8;\n                return _iterator.next();\n              case 8:\n                if (!(_iteratorAbruptCompletion = !(_step = _context5.sent).done)) {\n                  _context5.next = 16;\n                  break;\n                }\n                document = _step.value;\n                result = iterator(document);\n                if (!(result === false)) {\n                  _context5.next = 13;\n                  break;\n                }\n                return _context5.abrupt(\"break\", 16);\n              case 13:\n                _iteratorAbruptCompletion = false;\n                _context5.next = 6;\n                break;\n              case 16:\n                _context5.next = 22;\n                break;\n              case 18:\n                _context5.prev = 18;\n                _context5.t0 = _context5[\"catch\"](4);\n                _didIteratorError = true;\n                _iteratorError = _context5.t0;\n              case 22:\n                _context5.prev = 22;\n                _context5.prev = 23;\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context5.next = 27;\n                  break;\n                }\n                _context5.next = 27;\n                return _iterator.return();\n              case 27:\n                _context5.prev = 27;\n                if (!_didIteratorError) {\n                  _context5.next = 30;\n                  break;\n                }\n                throw _iteratorError;\n              case 30:\n                return _context5.finish(27);\n              case 31:\n                return _context5.finish(22);\n              case 32:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[4, 18, 22, 32], [23,, 27, 31]]);\n      }));\n      function forEach(_x) {\n        return _forEach.apply(this, arguments);\n      }\n      return forEach;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var needsToEmitClosed;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                needsToEmitClosed = !this[kClosed];\n                this[kClosed] = true;\n                _context6.next = 4;\n                return cleanupCursor(this, {\n                  needsToEmitClosed: needsToEmitClosed\n                });\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n  }, {\n    key: \"toArray\",\n    value: function () {\n      var _toArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var array, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, document;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                array = [];\n                _iteratorAbruptCompletion2 = false;\n                _didIteratorError2 = false;\n                _context7.prev = 3;\n                _iterator2 = _asyncIterator(this);\n              case 5:\n                _context7.next = 7;\n                return _iterator2.next();\n              case 7:\n                if (!(_iteratorAbruptCompletion2 = !(_step2 = _context7.sent).done)) {\n                  _context7.next = 13;\n                  break;\n                }\n                document = _step2.value;\n                array.push(document);\n              case 10:\n                _iteratorAbruptCompletion2 = false;\n                _context7.next = 5;\n                break;\n              case 13:\n                _context7.next = 19;\n                break;\n              case 15:\n                _context7.prev = 15;\n                _context7.t0 = _context7[\"catch\"](3);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context7.t0;\n              case 19:\n                _context7.prev = 19;\n                _context7.prev = 20;\n                if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                  _context7.next = 24;\n                  break;\n                }\n                _context7.next = 24;\n                return _iterator2.return();\n              case 24:\n                _context7.prev = 24;\n                if (!_didIteratorError2) {\n                  _context7.next = 27;\n                  break;\n                }\n                throw _iteratorError2;\n              case 27:\n                return _context7.finish(24);\n              case 28:\n                return _context7.finish(19);\n              case 29:\n                return _context7.abrupt(\"return\", array);\n              case 30:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[3, 15, 19, 29], [20,, 24, 28]]);\n      }));\n      function toArray() {\n        return _toArray.apply(this, arguments);\n      }\n      return toArray;\n    }()\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n  }, {\n    key: \"addCursorFlag\",\n    value: function addCursorFlag(flag, value) {\n      assertUninitialized(this);\n      if (!exports.CURSOR_FLAGS.includes(flag)) {\n        throw new error_1.MongoInvalidArgumentError(\"Flag \".concat(flag, \" is not one of \").concat(exports.CURSOR_FLAGS));\n      }\n      if (typeof value !== 'boolean') {\n        throw new error_1.MongoInvalidArgumentError(\"Flag \".concat(flag, \" must be a boolean value\"));\n      }\n      this[kOptions][flag] = value;\n      return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n  }, {\n    key: \"map\",\n    value: function map(transform) {\n      assertUninitialized(this);\n      var oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n      if (oldTransform) {\n        this[kTransform] = function (doc) {\n          return transform(oldTransform(doc));\n        };\n      } else {\n        this[kTransform] = transform;\n      }\n      return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n  }, {\n    key: \"withReadPreference\",\n    value: function withReadPreference(readPreference) {\n      assertUninitialized(this);\n      if (readPreference instanceof read_preference_1.ReadPreference) {\n        this[kOptions].readPreference = readPreference;\n      } else if (typeof readPreference === 'string') {\n        this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n      } else {\n        throw new error_1.MongoInvalidArgumentError(\"Invalid read preference: \".concat(readPreference));\n      }\n      return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n  }, {\n    key: \"withReadConcern\",\n    value: function withReadConcern(readConcern) {\n      assertUninitialized(this);\n      var resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({\n        readConcern: readConcern\n      });\n      if (resolvedReadConcern) {\n        this[kOptions].readConcern = resolvedReadConcern;\n      }\n      return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n  }, {\n    key: \"maxTimeMS\",\n    value: function maxTimeMS(value) {\n      assertUninitialized(this);\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n      }\n      this[kOptions].maxTimeMS = value;\n      return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n  }, {\n    key: \"batchSize\",\n    value: function batchSize(value) {\n      assertUninitialized(this);\n      if (this[kOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n      }\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n      }\n      this[kOptions].batchSize = value;\n      return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n  }, {\n    key: \"rewind\",\n    value: function rewind() {\n      if (!this[kInitialized]) {\n        return;\n      }\n      this[kId] = null;\n      this[kDocuments].clear();\n      this[kClosed] = false;\n      this[kKilled] = false;\n      this[kInitialized] = false;\n      var session = this[kSession];\n      if (session) {\n        // We only want to end this session if we created it, and it hasn't ended yet\n        if (session.explicit === false) {\n          if (!session.hasEnded) {\n            session.endSession().catch(function () {\n              return null;\n            });\n          }\n          this[kSession] = this.client.startSession({\n            owner: this,\n            explicit: false\n          });\n        }\n      }\n    } /** @internal */\n  }, {\n    key: \"getMore\",\n    value: function () {\n      var _getMore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(batchSize) {\n        var getMoreOperation;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                getMoreOperation = new get_more_1.GetMoreOperation(this[kNamespace], this[kId], this[kServer], _objectSpread({}, this[kOptions], {\n                  session: this[kSession],\n                  batchSize: batchSize\n                }));\n                return _context8.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this[kClient], getMoreOperation));\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function getMore(_x2) {\n        return _getMore.apply(this, arguments);\n      }\n      return getMore;\n    }()\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */\n  }, {\n    key: kInit,\n    value: function () {\n      var _value = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var state, response;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return this._initialize(this[kSession]);\n              case 3:\n                state = _context9.sent;\n                response = state.response;\n                this[kServer] = state.server;\n                if (response.cursor) {\n                  // TODO(NODE-2674): Preserve int64 sent from MongoDB\n                  this[kId] = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : typeof response.cursor.id === 'bigint' ? bson_1.Long.fromBigInt(response.cursor.id) : response.cursor.id;\n                  if (response.cursor.ns) {\n                    this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n                  }\n                  this[kDocuments].pushMany(response.cursor.firstBatch);\n                }\n                // When server responses return without a cursor document, we close this cursor\n                // and return the raw server response. This is often the case for explain commands\n                // for example\n                if (this[kId] == null) {\n                  this[kId] = bson_1.Long.ZERO;\n                  // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n                  this[kDocuments].push(state.response);\n                }\n                // the cursor is now initialized, even if it is dead\n                this[kInitialized] = true;\n                _context9.next = 17;\n                break;\n              case 11:\n                _context9.prev = 11;\n                _context9.t0 = _context9[\"catch\"](0);\n                // the cursor is now initialized, even if an error occurred\n                this[kInitialized] = true;\n                _context9.next = 16;\n                return cleanupCursor(this, {\n                  error: _context9.t0\n                });\n              case 16:\n                throw _context9.t0;\n              case 17:\n                if (!this.isDead) {\n                  _context9.next = 20;\n                  break;\n                }\n                _context9.next = 20;\n                return cleanupCursor(this, undefined);\n              case 20:\n                return _context9.abrupt(\"return\");\n              case 21:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 11]]);\n      }));\n      function value() {\n        return _value.apply(this, arguments);\n      }\n      return value;\n    }()\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this[kId] ?? undefined;\n    } /** @internal */\n  }, {\n    key: \"isDead\",\n    get: function get() {\n      return (this[kId]?.isZero() ?? false) || this[kClosed] || this[kKilled];\n    } /** @internal */\n  }, {\n    key: \"client\",\n    get: function get() {\n      return this[kClient];\n    } /** @internal */\n  }, {\n    key: \"server\",\n    get: function get() {\n      return this[kServer];\n    }\n  }, {\n    key: \"namespace\",\n    get: function get() {\n      return this[kNamespace];\n    }\n  }, {\n    key: \"readPreference\",\n    get: function get() {\n      return this[kOptions].readPreference;\n    }\n  }, {\n    key: \"readConcern\",\n    get: function get() {\n      return this[kOptions].readConcern;\n    } /** @internal */\n  }, {\n    key: \"session\",\n    get: function get() {\n      return this[kSession];\n    },\n    set: function set(clientSession) {\n      this[kSession] = clientSession;\n    } /** @internal */\n  }, {\n    key: \"cursorOptions\",\n    get: function get() {\n      return this[kOptions];\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this[kClosed];\n    }\n  }, {\n    key: \"killed\",\n    get: function get() {\n      return this[kKilled];\n    }\n  }, {\n    key: \"loadBalanced\",\n    get: function get() {\n      return !!this[kClient].topology?.loadBalanced;\n    }\n  }]);\n  return AbstractCursor;\n}(mongo_types_1.TypedEventEmitter);\n/** @event */\nAbstractCursor.CLOSE = 'close';\nexports.AbstractCursor = AbstractCursor;\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\n */\nfunction _next(_x3, _x4) {\n  return _next3.apply(this, arguments);\n}\nfunction _next3() {\n  _next3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(cursor, _ref) {\n    var blocking, transform, doc, batchSize, response, cursorId;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            blocking = _ref.blocking, transform = _ref.transform;\n            if (!cursor.closed) {\n              _context10.next = 3;\n              break;\n            }\n            return _context10.abrupt(\"return\", null);\n          case 3:\n            if (!(cursor[kId] == null)) {\n              _context10.next = 6;\n              break;\n            }\n            _context10.next = 6;\n            return cursor[kInit]();\n          case 6:\n            if (!(cursor[kDocuments].length !== 0)) {\n              _context10.next = 19;\n              break;\n            }\n            doc = cursor[kDocuments].shift();\n            if (!(doc != null && transform && cursor[kTransform])) {\n              _context10.next = 18;\n              break;\n            }\n            _context10.prev = 9;\n            return _context10.abrupt(\"return\", cursor[kTransform](doc));\n          case 13:\n            _context10.prev = 13;\n            _context10.t0 = _context10[\"catch\"](9);\n            _context10.next = 17;\n            return cleanupCursor(cursor, {\n              error: _context10.t0,\n              needsToEmitClosed: true\n            }).catch(function () {\n              return null;\n            });\n          case 17:\n            throw _context10.t0;\n          case 18:\n            return _context10.abrupt(\"return\", doc);\n          case 19:\n            if (!cursor.isDead) {\n              _context10.next = 23;\n              break;\n            }\n            _context10.next = 22;\n            return cleanupCursor(cursor, {});\n          case 22:\n            return _context10.abrupt(\"return\", null);\n          case 23:\n            // otherwise need to call getMore\n            batchSize = cursor[kOptions].batchSize || 1000;\n            _context10.prev = 24;\n            _context10.next = 27;\n            return cursor.getMore(batchSize);\n          case 27:\n            response = _context10.sent;\n            if (response) {\n              cursorId = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : typeof response.cursor.id === 'bigint' ? bson_1.Long.fromBigInt(response.cursor.id) : response.cursor.id;\n              cursor[kDocuments].pushMany(response.cursor.nextBatch);\n              cursor[kId] = cursorId;\n            }\n            _context10.next = 36;\n            break;\n          case 31:\n            _context10.prev = 31;\n            _context10.t1 = _context10[\"catch\"](24);\n            _context10.next = 35;\n            return cleanupCursor(cursor, {\n              error: _context10.t1\n            }).catch(function () {\n              return null;\n            });\n          case 35:\n            throw _context10.t1;\n          case 36:\n            if (!cursor.isDead) {\n              _context10.next = 39;\n              break;\n            }\n            _context10.next = 39;\n            return cleanupCursor(cursor, {});\n          case 39:\n            if (!(cursor[kDocuments].length === 0 && blocking === false)) {\n              _context10.next = 41;\n              break;\n            }\n            return _context10.abrupt(\"return\", null);\n          case 41:\n            if (!cursor.isDead || cursor[kDocuments].length !== 0) {\n              _context10.next = 3;\n              break;\n            }\n          case 42:\n            return _context10.abrupt(\"return\", null);\n          case 43:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[9, 13], [24, 31]]);\n  }));\n  return _next3.apply(this, arguments);\n}\nfunction cleanupCursor(_x5, _x6) {\n  return _cleanupCursor.apply(this, arguments);\n}\n/** @internal */\nfunction _cleanupCursor() {\n  _cleanupCursor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(cursor, options) {\n    var cursorId, cursorNs, server, session, error, needsToEmitClosed, completeCleanup, _completeCleanup;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _completeCleanup = function _completeCleanup3() {\n              _completeCleanup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n                return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        if (!session) {\n                          _context11.next = 10;\n                          break;\n                        }\n                        if (!(session.owner === cursor)) {\n                          _context11.next = 9;\n                          break;\n                        }\n                        _context11.prev = 2;\n                        _context11.next = 5;\n                        return session.endSession({\n                          error: error\n                        });\n                      case 5:\n                        _context11.prev = 5;\n                        cursor.emit(AbstractCursor.CLOSE);\n                        return _context11.finish(5);\n                      case 8:\n                        return _context11.abrupt(\"return\");\n                      case 9:\n                        if (!session.inTransaction()) {\n                          (0, sessions_1.maybeClearPinnedConnection)(session, {\n                            error: error\n                          });\n                        }\n                      case 10:\n                        cursor.emit(AbstractCursor.CLOSE);\n                        return _context11.abrupt(\"return\");\n                      case 12:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee11, null, [[2,, 5, 8]]);\n              }));\n              return _completeCleanup.apply(this, arguments);\n            };\n            completeCleanup = function _completeCleanup2() {\n              return _completeCleanup.apply(this, arguments);\n            };\n            cursorId = cursor[kId];\n            cursorNs = cursor[kNamespace];\n            server = cursor[kServer];\n            session = cursor[kSession];\n            error = options?.error; // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\n            // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\n            // cleanup the cursor but don't emit a `close` event.\n            needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n            if (!error) {\n              _context12.next = 11;\n              break;\n            }\n            if (!(cursor.loadBalanced && error instanceof error_1.MongoNetworkError)) {\n              _context12.next = 11;\n              break;\n            }\n            return _context12.abrupt(\"return\", completeCleanup());\n          case 11:\n            if (!(cursorId == null || server == null || cursorId.isZero() || cursorNs == null)) {\n              _context12.next = 20;\n              break;\n            }\n            if (needsToEmitClosed) {\n              cursor[kClosed] = true;\n              cursor[kId] = bson_1.Long.ZERO;\n              cursor.emit(AbstractCursor.CLOSE);\n            }\n            if (!session) {\n              _context12.next = 19;\n              break;\n            }\n            if (!(session.owner === cursor)) {\n              _context12.next = 18;\n              break;\n            }\n            _context12.next = 17;\n            return session.endSession({\n              error: error\n            });\n          case 17:\n            return _context12.abrupt(\"return\");\n          case 18:\n            if (!session.inTransaction()) {\n              (0, sessions_1.maybeClearPinnedConnection)(session, {\n                error: error\n              });\n            }\n          case 19:\n            return _context12.abrupt(\"return\");\n          case 20:\n            cursor[kKilled] = true;\n            if (!session.hasEnded) {\n              _context12.next = 23;\n              break;\n            }\n            return _context12.abrupt(\"return\", completeCleanup());\n          case 23:\n            _context12.prev = 23;\n            _context12.next = 26;\n            return (0, execute_operation_1.executeOperation)(cursor[kClient], new kill_cursors_1.KillCursorsOperation(cursorId, cursorNs, server, {\n              session: session\n            })).catch(function () {\n              return null;\n            });\n          case 26:\n            _context12.prev = 26;\n            _context12.next = 29;\n            return completeCleanup();\n          case 29:\n            return _context12.finish(26);\n          case 30:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12, null, [[23,, 26, 30]]);\n  }));\n  return _cleanupCursor.apply(this, arguments);\n}\nfunction assertUninitialized(cursor) {\n  if (cursor[kInitialized]) {\n    throw new error_1.MongoCursorInUseError();\n  }\n}\nexports.assertUninitialized = assertUninitialized;\nvar ReadableCursorStream = /*#__PURE__*/function (_stream_1$Readable) {\n  _inherits(ReadableCursorStream, _stream_1$Readable);\n  function ReadableCursorStream(cursor) {\n    var _this3;\n    _classCallCheck(this, ReadableCursorStream);\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ReadableCursorStream).call(this, {\n      objectMode: true,\n      autoDestroy: false,\n      highWaterMark: 1\n    }));\n    _this3._readInProgress = false;\n    _this3._cursor = cursor;\n    return _this3;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _createClass(ReadableCursorStream, [{\n    key: \"_read\",\n    value: function _read(size) {\n      if (!this._readInProgress) {\n        this._readInProgress = true;\n        this._readNext();\n      }\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(error, callback) {\n      this._cursor.close().then(function () {\n        return callback(error);\n      }, function (closeError) {\n        return callback(closeError);\n      });\n    }\n  }, {\n    key: \"_readNext\",\n    value: function _readNext() {\n      var _this4 = this;\n      _next(this._cursor, {\n        blocking: true,\n        transform: true\n      }).then(function (result) {\n        if (result == null) {\n          _this4.push(null);\n        } else if (_this4.destroyed) {\n          _this4._cursor.close().catch(function () {\n            return null;\n          });\n        } else {\n          if (_this4.push(result)) {\n            return _this4._readNext();\n          }\n          _this4._readInProgress = false;\n        }\n      }, function (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          _this4._cursor.close().catch(function () {\n            return null;\n          });\n          return _this4.push(null);\n        }\n        // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n        if (err.message.match(/operation was interrupted/)) {\n          return _this4.push(null);\n        }\n        // NOTE: The two above checks on the message of the error will cause a null to be pushed\n        //       to the stream, thus closing the stream before the destroy call happens. This means\n        //       that either of those error messages on a change stream will not get a proper\n        //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n        //       relies on that error event to be emitted to create its new cursor and thus was not\n        //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n        //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n        //       See NODE-4475.\n        return _this4.destroy(err);\n      });\n    }\n  }]);\n  return ReadableCursorStream;\n}(stream_1.Readable);","map":null,"metadata":{},"sourceType":"script"}