{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoClient = exports.ServerApiVersion = void 0;\nvar fs_1 = require(\"fs\");\nvar util_1 = require(\"util\");\nvar bson_1 = require(\"./bson\");\nvar change_stream_1 = require(\"./change_stream\");\nvar mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nvar providers_1 = require(\"./cmap/auth/providers\");\nvar connection_string_1 = require(\"./connection_string\");\nvar constants_1 = require(\"./constants\");\nvar db_1 = require(\"./db\");\nvar error_1 = require(\"./error\");\nvar mongo_logger_1 = require(\"./mongo_logger\");\nvar mongo_types_1 = require(\"./mongo_types\");\nvar execute_operation_1 = require(\"./operations/execute_operation\");\nvar run_command_1 = require(\"./operations/run_command\");\nvar read_preference_1 = require(\"./read_preference\");\nvar server_selection_1 = require(\"./sdam/server_selection\");\nvar topology_1 = require(\"./sdam/topology\");\nvar sessions_1 = require(\"./sessions\");\nvar utils_1 = require(\"./utils\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n  v1: '1'\n});\n/** @internal */\nvar kOptions = Symbol('options');\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nvar MongoClient = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(MongoClient, _mongo_types_1$TypedE);\n  function MongoClient(url, options) {\n    var _this;\n    _classCallCheck(this, MongoClient);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoClient).call(this));\n    _this[kOptions] = (0, connection_string_1.parseOptions)(url, _assertThisInitialized(_assertThisInitialized(_this)), options);\n    _this.mongoLogger = new mongo_logger_1.MongoLogger(_this[kOptions].mongoLoggerOptions);\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    var client = _assertThisInitialized(_assertThisInitialized(_this));\n    // The internal state\n    _this.s = {\n      url: url,\n      bsonOptions: (0, bson_1.resolveBSONOptions)(_this[kOptions]),\n      namespace: (0, utils_1.ns)('admin'),\n      hasBeenClosed: false,\n      sessionPool: new sessions_1.ServerSessionPool(_assertThisInitialized(_assertThisInitialized(_this))),\n      activeSessions: new Set(),\n      get options() {\n        return client[kOptions];\n      },\n      get readConcern() {\n        return client[kOptions].readConcern;\n      },\n      get writeConcern() {\n        return client[kOptions].writeConcern;\n      },\n      get readPreference() {\n        return client[kOptions].readPreference;\n      },\n      get isMongoClient() {\n        return true;\n      }\n    };\n    _this.checkForNonGenuineHosts();\n    return _this;\n  }\n  /** @internal */\n  _createClass(MongoClient, [{\n    key: \"checkForNonGenuineHosts\",\n    value: function checkForNonGenuineHosts() {\n      var documentDBHostnames = this[kOptions].hosts.filter(function (hostAddress) {\n        return (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host);\n      });\n      var srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this[kOptions].srvHost);\n      var cosmosDBHostnames = this[kOptions].hosts.filter(function (hostAddress) {\n        return (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host);\n      });\n      var srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this[kOptions].srvHost);\n      if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n        this.mongoLogger.info('client', utils_1.DOCUMENT_DB_MSG);\n      } else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n        this.mongoLogger.info('client', utils_1.COSMOS_DB_MSG);\n      }\n    } /** @see MongoOptions */\n  }, {\n    key: \"connect\",\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */\n    value: function () {\n      var _connect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.connectionLock) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\", this.connectionLock);\n              case 2:\n                _context.prev = 2;\n                this.connectionLock = this._connect();\n                _context.next = 6;\n                return this.connectionLock;\n              case 6:\n                _context.prev = 6;\n                // release\n                this.connectionLock = undefined;\n                return _context.finish(6);\n              case 9:\n                return _context.abrupt(\"return\", this);\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2,, 6, 9]]);\n      }));\n      function connect() {\n        return _connect2.apply(this, arguments);\n      }\n      return connect;\n    }()\n    /**\n     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n     * Locking is enforced by the connect method.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_connect\",\n    value: function () {\n      var _connect3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _this2 = this;\n        var options, contents, hosts, _iterator, _step, _step$value, index, host, allowedHosts, isServiceAuth, _iterator2, _step2, _host, _iterator3, _step3, _loop, topologyConnect;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.topology && this.topology.isConnected())) {\n                  _context3.next = 2;\n                  break;\n                }\n                return _context3.abrupt(\"return\", this);\n              case 2:\n                options = this[kOptions];\n                if (!options.tls) {\n                  _context3.next = 21;\n                  break;\n                }\n                if (!(typeof options.tlsCAFile === 'string')) {\n                  _context3.next = 9;\n                  break;\n                }\n                _context3.t0 = options.ca;\n                _context3.next = 8;\n                return fs_1.promises.readFile(options.tlsCAFile);\n              case 8:\n                options.ca = _context3.t0 ??= _context3.sent;\n              case 9:\n                if (!(typeof options.tlsCRLFile === 'string')) {\n                  _context3.next = 14;\n                  break;\n                }\n                _context3.t1 = options.crl;\n                _context3.next = 13;\n                return fs_1.promises.readFile(options.tlsCRLFile);\n              case 13:\n                options.crl = _context3.t1 ??= _context3.sent;\n              case 14:\n                if (!(typeof options.tlsCertificateKeyFile === 'string')) {\n                  _context3.next = 21;\n                  break;\n                }\n                if (!(!options.key || !options.cert)) {\n                  _context3.next = 21;\n                  break;\n                }\n                _context3.next = 18;\n                return fs_1.promises.readFile(options.tlsCertificateKeyFile);\n              case 18:\n                contents = _context3.sent;\n                options.key ??= contents;\n                options.cert ??= contents;\n              case 21:\n                if (!(typeof options.srvHost === 'string')) {\n                  _context3.next = 27;\n                  break;\n                }\n                _context3.next = 24;\n                return (0, connection_string_1.resolveSRVRecord)(options);\n              case 24:\n                hosts = _context3.sent;\n                _iterator = _createForOfIteratorHelper(hosts.entries());\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _step$value = _slicedToArray(_step.value, 2), index = _step$value[0], host = _step$value[1];\n                    options.hosts[index] = host;\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n              case 27:\n                if (!(options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC)) {\n                  _context3.next = 48;\n                  break;\n                }\n                allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n                isServiceAuth = !!options.credentials?.mechanismProperties?.PROVIDER_NAME;\n                if (isServiceAuth) {\n                  _context3.next = 48;\n                  break;\n                }\n                _iterator2 = _createForOfIteratorHelper(options.hosts);\n                _context3.prev = 32;\n                _iterator2.s();\n              case 34:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context3.next = 40;\n                  break;\n                }\n                _host = _step2.value;\n                if ((0, utils_1.hostMatchesWildcards)(_host.toHostPort().host, allowedHosts)) {\n                  _context3.next = 38;\n                  break;\n                }\n                throw new error_1.MongoInvalidArgumentError(\"Host '\".concat(_host, \"' is not valid for OIDC authentication with ALLOWED_HOSTS of '\").concat(allowedHosts.join(','), \"'\"));\n              case 38:\n                _context3.next = 34;\n                break;\n              case 40:\n                _context3.next = 45;\n                break;\n              case 42:\n                _context3.prev = 42;\n                _context3.t2 = _context3[\"catch\"](32);\n                _iterator2.e(_context3.t2);\n              case 45:\n                _context3.prev = 45;\n                _iterator2.f();\n                return _context3.finish(45);\n              case 48:\n                this.topology = new topology_1.Topology(this, options.hosts, options);\n                // Events can be emitted before initialization is complete so we have to\n                // save the reference to the topology on the client ASAP if the event handlers need to access it\n                this.topology.once(topology_1.Topology.OPEN, function () {\n                  return _this2.emit('open', _this2);\n                });\n                _iterator3 = _createForOfIteratorHelper(constants_1.MONGO_CLIENT_EVENTS);\n                try {\n                  _loop = function _loop() {\n                    var event = _step3.value;\n                    _this2.topology.on(event, function () {\n                      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                        args[_key] = arguments[_key];\n                      }\n                      return _this2.emit.apply(_this2, [event].concat(args));\n                    });\n                  };\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    _loop();\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n                topologyConnect = /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.prev = 0;\n                            _context2.next = 3;\n                            return (0, util_1.promisify)(function (callback) {\n                              return _this2.topology?.connect(options, callback);\n                            })();\n                          case 3:\n                            _context2.next = 9;\n                            break;\n                          case 5:\n                            _context2.prev = 5;\n                            _context2.t0 = _context2[\"catch\"](0);\n                            _this2.topology?.close({\n                              force: true\n                            });\n                            throw _context2.t0;\n                          case 9:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, null, [[0, 5]]);\n                  }));\n                  return function topologyConnect() {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n                if (!this.autoEncrypter) {\n                  _context3.next = 62;\n                  break;\n                }\n                _context3.next = 56;\n                return this.autoEncrypter?.init();\n              case 56:\n                _context3.next = 58;\n                return topologyConnect();\n              case 58:\n                _context3.next = 60;\n                return options.encrypter.connectInternalClient();\n              case 60:\n                _context3.next = 64;\n                break;\n              case 62:\n                _context3.next = 64;\n                return topologyConnect();\n              case 64:\n                return _context3.abrupt(\"return\", this);\n              case 65:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[32, 42, 45, 48]]);\n      }));\n      function _connect() {\n        return _connect3.apply(this, arguments);\n      }\n      return _connect;\n    }()\n    /**\n     * Close the client and its underlying connections\n     *\n     * @param force - Force close, emitting no events\n     */\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this3 = this;\n        var force,\n          activeSessionEnds,\n          selector,\n          topologyDescription,\n          serverDescriptions,\n          servers,\n          endSessions,\n          topology,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                force = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : false;\n                // There's no way to set hasBeenClosed back to false\n                Object.defineProperty(this.s, 'hasBeenClosed', {\n                  value: true,\n                  enumerable: true,\n                  configurable: false,\n                  writable: false\n                });\n                activeSessionEnds = Array.from(this.s.activeSessions, function (session) {\n                  return session.endSession();\n                });\n                this.s.activeSessions.clear();\n                _context4.next = 6;\n                return Promise.all(activeSessionEnds);\n              case 6:\n                if (!(this.topology == null)) {\n                  _context4.next = 8;\n                  break;\n                }\n                return _context4.abrupt(\"return\");\n              case 8:\n                // If we would attempt to select a server and get nothing back we short circuit\n                // to avoid the server selection timeout.\n                selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n                topologyDescription = this.topology.description;\n                serverDescriptions = Array.from(topologyDescription.servers.values());\n                servers = selector(topologyDescription, serverDescriptions);\n                if (!(servers.length !== 0)) {\n                  _context4.next = 17;\n                  break;\n                }\n                endSessions = Array.from(this.s.sessionPool.sessions, function (_ref2) {\n                  var id = _ref2.id;\n                  return id;\n                });\n                if (!(endSessions.length !== 0)) {\n                  _context4.next = 17;\n                  break;\n                }\n                _context4.next = 17;\n                return (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({\n                  endSessions: endSessions\n                }, {\n                  readPreference: read_preference_1.ReadPreference.primaryPreferred,\n                  noResponse: true\n                })).catch(function () {\n                  return null;\n                });\n              case 17:\n                // clear out references to old topology\n                topology = this.topology;\n                this.topology = undefined;\n                _context4.next = 21;\n                return new Promise(function (resolve, reject) {\n                  topology.close({\n                    force: force\n                  }, function (error) {\n                    if (error) return reject(error);\n                    var encrypter = _this3[kOptions].encrypter;\n                    if (encrypter) {\n                      return encrypter.closeCallback(_this3, force, function (error) {\n                        if (error) return reject(error);\n                        resolve();\n                      });\n                    }\n                    resolve();\n                  });\n                });\n              case 21:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */\n  }, {\n    key: \"db\",\n    value: function db(dbName, options) {\n      options = options ?? {};\n      // Default to db from connection string if not provided\n      if (!dbName) {\n        dbName = this.options.dbName;\n      }\n      // Copy the options and add out internal override of the not shared flag\n      var finalOptions = Object.assign({}, this[kOptions], options);\n      // Return the db object\n      var db = new db_1.Db(this, dbName, finalOptions);\n      // Return the database\n      return db;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */\n  }, {\n    key: \"startSession\",\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */\n    value: function startSession(options) {\n      var _this4 = this;\n      var session = new sessions_1.ClientSession(this, this.s.sessionPool, _objectSpread({\n        explicit: true\n      }, options), this[kOptions]);\n      this.s.activeSessions.add(session);\n      session.once('ended', function () {\n        _this4.s.activeSessions.delete(session);\n      });\n      return session;\n    }\n  }, {\n    key: \"withSession\",\n    value: function () {\n      var _withSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(optionsOrExecutor, executor) {\n        var options, withSessionCallback, session;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _objectSpread({\n                  // Always define an owner\n                  owner: Symbol()\n                }, typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {});\n                withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n                if (!(withSessionCallback == null)) {\n                  _context5.next = 4;\n                  break;\n                }\n                throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n              case 4:\n                session = this.startSession(options);\n                _context5.prev = 5;\n                _context5.next = 8;\n                return withSessionCallback(session);\n              case 8:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 9:\n                _context5.prev = 9;\n                _context5.prev = 10;\n                _context5.next = 13;\n                return session.endSession();\n              case 13:\n                _context5.next = 17;\n                break;\n              case 15:\n                _context5.prev = 15;\n                _context5.t0 = _context5[\"catch\"](10);\n              case 17:\n                return _context5.finish(9);\n              case 18:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[5,, 9, 18], [10, 15]]);\n      }));\n      function withSession(_x, _x2) {\n        return _withSession.apply(this, arguments);\n      }\n      return withSession;\n    }()\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n  }, {\n    key: \"watch\",\n    value: function watch() {\n      var pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // Allow optionally not specifying a pipeline\n      if (!Array.isArray(pipeline)) {\n        options = pipeline;\n        pipeline = [];\n      }\n      return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return Object.freeze(_objectSpread({}, this[kOptions]));\n    }\n  }, {\n    key: \"serverApi\",\n    get: function get() {\n      return this[kOptions].serverApi && Object.freeze(_objectSpread({}, this[kOptions].serverApi));\n    }\n    /**\n     * Intended for APM use only\n     * @internal\n     */\n  }, {\n    key: \"monitorCommands\",\n    get: function get() {\n      return this[kOptions].monitorCommands;\n    },\n    set: function set(value) {\n      this[kOptions].monitorCommands = value;\n    } /** @internal */\n  }, {\n    key: \"autoEncrypter\",\n    get: function get() {\n      return this[kOptions].autoEncrypter;\n    }\n  }, {\n    key: \"readConcern\",\n    get: function get() {\n      return this.s.readConcern;\n    }\n  }, {\n    key: \"writeConcern\",\n    get: function get() {\n      return this.s.writeConcern;\n    }\n  }, {\n    key: \"readPreference\",\n    get: function get() {\n      return this.s.readPreference;\n    }\n  }, {\n    key: \"bsonOptions\",\n    get: function get() {\n      return this.s.bsonOptions;\n    }\n  }], [{\n    key: \"connect\",\n    value: function () {\n      var _connect4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(url, options) {\n        var client;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                client = new this(url, options);\n                return _context6.abrupt(\"return\", client.connect());\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function connect(_x3, _x4) {\n        return _connect4.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }]);\n  return MongoClient;\n}(mongo_types_1.TypedEventEmitter);\nexports.MongoClient = MongoClient;","map":null,"metadata":{},"sourceType":"script"}