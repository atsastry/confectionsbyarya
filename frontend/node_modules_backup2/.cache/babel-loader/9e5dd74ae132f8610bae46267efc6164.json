{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _possibleConstructorReturn = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nvar _objectSpread = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _createClass = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"/Users/aryasastry/bootcamp-project-2022/milestone3/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nvar util_1 = require(\"util\");\nvar bson_1 = require(\"../bson\");\nvar error_1 = require(\"../error\");\nvar delete_1 = require(\"../operations/delete\");\nvar execute_operation_1 = require(\"../operations/execute_operation\");\nvar insert_1 = require(\"../operations/insert\");\nvar operation_1 = require(\"../operations/operation\");\nvar update_1 = require(\"../operations/update\");\nvar utils_1 = require(\"../utils\");\nvar write_concern_1 = require(\"../write_concern\");\n/** @internal */\nvar kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nvar Batch = function Batch(batchType, originalZeroIndex) {\n  _classCallCheck(this, Batch);\n  this.originalZeroIndex = originalZeroIndex;\n  this.currentIndex = 0;\n  this.originalIndexes = [];\n  this.batchType = batchType;\n  this.operations = [];\n  this.size = 0;\n  this.sizeBytes = 0;\n};\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nvar BulkWriteResult = /*#__PURE__*/function () {\n  _createClass(BulkWriteResult, null, [{\n    key: \"generateIdMap\",\n    value: function generateIdMap(ids) {\n      var idMap = {};\n      var _iterator = _createForOfIteratorHelper(ids),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var doc = _step.value;\n          idMap[doc.index] = doc._id;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n  }]);\n  function BulkWriteResult(bulkResult, isOrdered) {\n    _classCallCheck(this, BulkWriteResult);\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.getSuccessfullyInsertedIds(bulkResult, isOrdered));\n    Object.defineProperty(this, 'result', {\n      value: this.result,\n      enumerable: false\n    });\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n  _createClass(BulkWriteResult, [{\n    key: \"getSuccessfullyInsertedIds\",\n    /**\n     * Returns document_ids that were actually inserted\n     * @internal\n     */\n    value: function getSuccessfullyInsertedIds(bulkResult, isOrdered) {\n      if (bulkResult.writeErrors.length === 0) return bulkResult.insertedIds;\n      if (isOrdered) {\n        return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n      }\n      return bulkResult.insertedIds.filter(function (_ref) {\n        var index = _ref.index;\n        return !bulkResult.writeErrors.some(function (writeError) {\n          return index === writeError.index;\n        });\n      });\n    } /** Returns the upserted id at the given index */\n  }, {\n    key: \"getUpsertedIdAt\",\n    value: function getUpsertedIdAt(index) {\n      return this.result.upserted[index];\n    } /** Returns raw internal result */\n  }, {\n    key: \"getRawResponse\",\n    value: function getRawResponse() {\n      return this.result;\n    } /** Returns true if the bulk operation contains a write error */\n  }, {\n    key: \"hasWriteErrors\",\n    value: function hasWriteErrors() {\n      return this.result.writeErrors.length > 0;\n    } /** Returns the number of write errors off the bulk operation */\n  }, {\n    key: \"getWriteErrorCount\",\n    value: function getWriteErrorCount() {\n      return this.result.writeErrors.length;\n    } /** Returns a specific write error object */\n  }, {\n    key: \"getWriteErrorAt\",\n    value: function getWriteErrorAt(index) {\n      return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    } /** Retrieve all write errors */\n  }, {\n    key: \"getWriteErrors\",\n    value: function getWriteErrors() {\n      return this.result.writeErrors;\n    } /** Retrieve the write concern error if one exists */\n  }, {\n    key: \"getWriteConcernError\",\n    value: function getWriteConcernError() {\n      if (this.result.writeConcernErrors.length === 0) {\n        return;\n      } else if (this.result.writeConcernErrors.length === 1) {\n        // Return the error\n        return this.result.writeConcernErrors[0];\n      } else {\n        // Combine the errors\n        var errmsg = '';\n        for (var i = 0; i < this.result.writeConcernErrors.length; i++) {\n          var err = this.result.writeConcernErrors[i];\n          errmsg = errmsg + err.errmsg;\n          // TODO: Something better\n          if (i === 0) errmsg = errmsg + ' and ';\n        }\n        return new WriteConcernError({\n          errmsg: errmsg,\n          code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n        });\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"BulkWriteResult(\".concat(this.result, \")\");\n    }\n  }, {\n    key: \"isOk\",\n    value: function isOk() {\n      return this.result.ok === 1;\n    }\n  }, {\n    key: \"ok\",\n    get: function get() {\n      return this.result.ok;\n    }\n  }]);\n  return BulkWriteResult;\n}();\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nvar WriteConcernError = /*#__PURE__*/function () {\n  function WriteConcernError(error) {\n    _classCallCheck(this, WriteConcernError);\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n  _createClass(WriteConcernError, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this[kServerError];\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"WriteConcernError(\".concat(this.errmsg, \")\");\n    }\n  }, {\n    key: \"code\",\n    get: function get() {\n      return this[kServerError].code;\n    } /** Write concern error message. */\n  }, {\n    key: \"errmsg\",\n    get: function get() {\n      return this[kServerError].errmsg;\n    } /** Write concern error info. */\n  }, {\n    key: \"errInfo\",\n    get: function get() {\n      return this[kServerError].errInfo;\n    }\n  }]);\n  return WriteConcernError;\n}();\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nvar WriteError = /*#__PURE__*/function () {\n  function WriteError(err) {\n    _classCallCheck(this, WriteError);\n    this.err = err;\n  }\n  /** WriteError code. */\n  _createClass(WriteError, [{\n    key: \"getOperation\",\n    /** Returns the underlying operation that caused the error */value: function getOperation() {\n      return this.err.op;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        code: this.err.code,\n        index: this.err.index,\n        errmsg: this.err.errmsg,\n        op: this.err.op\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"WriteError(\".concat(JSON.stringify(this.toJSON()), \")\");\n    }\n  }, {\n    key: \"code\",\n    get: function get() {\n      return this.err.code;\n    } /** WriteError original bulk operation index. */\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this.err.index;\n    } /** WriteError message. */\n  }, {\n    key: \"errmsg\",\n    get: function get() {\n      return this.err.errmsg;\n    } /** WriteError details. */\n  }, {\n    key: \"errInfo\",\n    get: function get() {\n      return this.err.errInfo;\n    }\n  }]);\n  return WriteError;\n}();\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n  if (result == null) {\n    return;\n  }\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    var writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n  var nUpserted = 0;\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n    for (var i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    var nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n  if (Array.isArray(result.writeErrors)) {\n    for (var _i = 0; _i < result.writeErrors.length; _i++) {\n      var _writeError = {\n        index: batch.originalIndexes[result.writeErrors[_i].index],\n        code: result.writeErrors[_i].code,\n        errmsg: result.writeErrors[_i].errmsg,\n        errInfo: result.writeErrors[_i].errInfo,\n        op: batch.operations[result.writeErrors[_i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(_writeError));\n    }\n  }\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered));\n  }\n  var batch = bulkOperation.s.batches.shift();\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered)));\n    }\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, bulkOperation.isOrdered, err, callback);\n    }\n    // Merge the results together\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    var writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n  var finalOptions = (0, utils_1.resolveOptions)(bulkOperation, _objectSpread({}, options, {\n    ordered: bulkOperation.isOrdered\n  }));\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(function (op) {\n        return op.multi;\n      });\n    }\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(function (op) {\n        return op.limit === 0;\n      });\n    }\n  }\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, isOrdered, err, callback) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: err.result?.writeConcernError.errmsg,\n    code: err.result?.writeConcernError.result\n  }, new BulkWriteResult(bulkResult, isOrdered)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nvar MongoBulkWriteError = /*#__PURE__*/function (_error_1$MongoServerE) {\n  _inherits(MongoBulkWriteError, _error_1$MongoServerE);\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  function MongoBulkWriteError(error, result) {\n    var _this;\n    _classCallCheck(this, MongoBulkWriteError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MongoBulkWriteError).call(this, error));\n    _this.writeErrors = [];\n    if (error instanceof WriteConcernError) _this.err = error;else if (!(error instanceof Error)) {\n      _this.message = error.message;\n      _this.code = error.code;\n      _this.writeErrors = error.writeErrors ?? [];\n    }\n    _this.result = result;\n    Object.assign(_assertThisInitialized(_assertThisInitialized(_this)), error);\n    return _this;\n  }\n  _createClass(MongoBulkWriteError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoBulkWriteError';\n    } /** Number of documents inserted. */\n  }, {\n    key: \"insertedCount\",\n    get: function get() {\n      return this.result.insertedCount;\n    } /** Number of documents matched for update. */\n  }, {\n    key: \"matchedCount\",\n    get: function get() {\n      return this.result.matchedCount;\n    } /** Number of documents modified. */\n  }, {\n    key: \"modifiedCount\",\n    get: function get() {\n      return this.result.modifiedCount;\n    } /** Number of documents deleted. */\n  }, {\n    key: \"deletedCount\",\n    get: function get() {\n      return this.result.deletedCount;\n    } /** Number of documents upserted. */\n  }, {\n    key: \"upsertedCount\",\n    get: function get() {\n      return this.result.upsertedCount;\n    } /** Inserted document generated Id's, hash key is the index of the originating operation */\n  }, {\n    key: \"insertedIds\",\n    get: function get() {\n      return this.result.insertedIds;\n    } /** Upserted document generated Id's, hash key is the index of the originating operation */\n  }, {\n    key: \"upsertedIds\",\n    get: function get() {\n      return this.result.upsertedIds;\n    }\n  }]);\n  return MongoBulkWriteError;\n}(error_1.MongoServerError);\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nvar FindOperators = /*#__PURE__*/function () {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  function FindOperators(bulkOperation) {\n    _classCallCheck(this, FindOperators);\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n  _createClass(FindOperators, [{\n    key: \"update\",\n    value: function update(updateDocument) {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, _objectSpread({}, currentOp, {\n        multi: true\n      })));\n    } /** Add a single update operation to the bulk operation */\n  }, {\n    key: \"updateOne\",\n    value: function updateOne(updateDocument) {\n      if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n        throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n      }\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, _objectSpread({}, currentOp, {\n        multi: false\n      })));\n    } /** Add a replace one operation to the bulk operation */\n  }, {\n    key: \"replaceOne\",\n    value: function replaceOne(replacement) {\n      if ((0, utils_1.hasAtomicOperators)(replacement)) {\n        throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n      }\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, _objectSpread({}, currentOp, {\n        multi: false\n      })));\n    } /** Add a delete one operation to the bulk operation */\n  }, {\n    key: \"deleteOne\",\n    value: function deleteOne() {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, _objectSpread({}, currentOp, {\n        limit: 1\n      })));\n    } /** Add a delete many operation to the bulk operation */\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var currentOp = buildCurrentOp(this.bulkOperation);\n      return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, _objectSpread({}, currentOp, {\n        limit: 0\n      })));\n    } /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  }, {\n    key: \"upsert\",\n    value: function upsert() {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.upsert = true;\n      return this;\n    } /** Specifies the collation for the query condition. */\n  }, {\n    key: \"collation\",\n    value: function collation(_collation) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.collation = _collation;\n      return this;\n    } /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  }, {\n    key: \"arrayFilters\",\n    value: function arrayFilters(_arrayFilters) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.arrayFilters = _arrayFilters;\n      return this;\n    } /** Specifies hint for the bulk operation. */\n  }, {\n    key: \"hint\",\n    value: function hint(_hint) {\n      if (!this.bulkOperation.s.currentOp) {\n        this.bulkOperation.s.currentOp = {};\n      }\n      this.bulkOperation.s.currentOp.hint = _hint;\n      return this;\n    }\n  }]);\n  return FindOperators;\n}();\nexports.FindOperators = FindOperators;\nvar executeCommandsAsync = (0, util_1.promisify)(executeCommands);\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nvar BulkWriteShimOperation = /*#__PURE__*/function (_operation_1$Abstract) {\n  _inherits(BulkWriteShimOperation, _operation_1$Abstract);\n  function BulkWriteShimOperation(bulkOperation, options) {\n    var _this2;\n    _classCallCheck(this, BulkWriteShimOperation);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(BulkWriteShimOperation).call(this, options));\n    _this2.bulkOperation = bulkOperation;\n    return _this2;\n  }\n  _createClass(BulkWriteShimOperation, [{\n    key: \"execute\",\n    value: function execute(_server, session) {\n      if (this.options.session == null) {\n        // An implicit session could have been created by 'executeOperation'\n        // So if we stick it on finalOptions here, each bulk operation\n        // will use this same session, it'll be passed in the same way\n        // an explicit session would be\n        this.options.session = session;\n      }\n      return executeCommandsAsync(this.bulkOperation, this.options);\n    }\n  }]);\n  return BulkWriteShimOperation;\n}(operation_1.AbstractOperation);\n/** @public */\nvar BulkOperationBase = /*#__PURE__*/function () {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  function BulkOperationBase(collection, options, isOrdered) {\n    _classCallCheck(this, BulkOperationBase);\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    var topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    var namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    var executed = false;\n    // Current item\n    var currentOp = undefined;\n    // Set max byte size\n    var hello = topology.lastHello();\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    var usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    var maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    var maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    var maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    var maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n    // Final options for retryable writes\n    var finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n    // Final results\n    var bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult: bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize: maxBsonObjectSize,\n      maxBatchSizeBytes: maxBatchSizeBytes,\n      maxWriteBatchSize: maxWriteBatchSize,\n      maxKeySize: maxKeySize,\n      // Namespace\n      namespace: namespace,\n      // Topology\n      topology: topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp: currentOp,\n      // Executed\n      executed: executed,\n      // Collection\n      collection: collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  _createClass(BulkOperationBase, [{\n    key: \"insert\",\n    value: function insert(document) {\n      if (document._id == null && !shouldForceServerObjectId(this)) {\n        document._id = new bson_1.ObjectId();\n      }\n      return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n  }, {\n    key: \"find\",\n    value: function find(selector) {\n      if (!selector) {\n        throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n      }\n      // Save a current selector\n      this.s.currentOp = {\n        selector: selector\n      };\n      return new FindOperators(this);\n    } /** Specifies a raw operation to perform in the bulk write. */\n  }, {\n    key: \"raw\",\n    value: function raw(op) {\n      if (op == null || typeof op !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n      }\n      if ('insertOne' in op) {\n        var forceServerObjectId = shouldForceServerObjectId(this);\n        if (op.insertOne && op.insertOne.document == null) {\n          // NOTE: provided for legacy support, but this is a malformed operation\n          if (forceServerObjectId !== true && op.insertOne._id == null) {\n            op.insertOne._id = new bson_1.ObjectId();\n          }\n          return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n        }\n        if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n          op.insertOne.document._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n      }\n      if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n        if ('replaceOne' in op) {\n          if ('q' in op.replaceOne) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n          var updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, _objectSpread({}, op.replaceOne, {\n            multi: false\n          }));\n          if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n          }\n          return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n        }\n        if ('updateOne' in op) {\n          if ('q' in op.updateOne) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n          var _updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, _objectSpread({}, op.updateOne, {\n            multi: false\n          }));\n          if (!(0, utils_1.hasAtomicOperators)(_updateStatement.u)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n          }\n          return this.addToOperationsList(exports.BatchType.UPDATE, _updateStatement);\n        }\n        if ('updateMany' in op) {\n          if ('q' in op.updateMany) {\n            throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n          }\n          var _updateStatement2 = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, _objectSpread({}, op.updateMany, {\n            multi: true\n          }));\n          if (!(0, utils_1.hasAtomicOperators)(_updateStatement2.u)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n          }\n          return this.addToOperationsList(exports.BatchType.UPDATE, _updateStatement2);\n        }\n      }\n      if ('deleteOne' in op) {\n        if ('q' in op.deleteOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, _objectSpread({}, op.deleteOne, {\n          limit: 1\n        })));\n      }\n      if ('deleteMany' in op) {\n        if ('q' in op.deleteMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, _objectSpread({}, op.deleteMany, {\n          limit: 0\n        })));\n      }\n      // otherwise an unknown operation was provided\n      throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var options,\n          writeConcern,\n          finalOptions,\n          operation,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                if (!this.s.executed) {\n                  _context.next = 3;\n                  break;\n                }\n                throw new error_1.MongoBatchReExecutionError();\n              case 3:\n                writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n                if (writeConcern) {\n                  this.s.writeConcern = writeConcern;\n                }\n                // If we have current batch\n                if (this.isOrdered) {\n                  if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n                } else {\n                  if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n                  if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n                  if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n                }\n                // If we have no operations in the bulk raise an error\n                if (!(this.s.batches.length === 0)) {\n                  _context.next = 8;\n                  break;\n                }\n                throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n              case 8:\n                this.s.executed = true;\n                finalOptions = _objectSpread({}, this.s.options, options);\n                operation = new BulkWriteShimOperation(this, finalOptions);\n                return _context.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.s.collection.client, operation));\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n  }, {\n    key: \"handleWriteError\",\n    value: function handleWriteError(callback, writeResult) {\n      if (this.s.bulkResult.writeErrors.length > 0) {\n        var msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n        callback(new MongoBulkWriteError({\n          message: msg,\n          code: this.s.bulkResult.writeErrors[0].code,\n          writeErrors: this.s.bulkResult.writeErrors\n        }, writeResult));\n        return true;\n      }\n      var writeConcernError = writeResult.getWriteConcernError();\n      if (writeConcernError) {\n        callback(new MongoBulkWriteError(writeConcernError, writeResult));\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"bsonOptions\",\n    get: function get() {\n      return this.s.bsonOptions;\n    }\n  }, {\n    key: \"writeConcern\",\n    get: function get() {\n      return this.s.writeConcern;\n    }\n  }, {\n    key: \"batches\",\n    get: function get() {\n      var batches = _toConsumableArray(this.s.batches);\n      if (this.isOrdered) {\n        if (this.s.currentBatch) batches.push(this.s.currentBatch);\n      } else {\n        if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n        if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n        if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n      }\n      return batches;\n    }\n  }]);\n  return BulkOperationBase;\n}();\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get: function get() {\n    return this.s.currentIndex;\n  }\n});\nfunction shouldForceServerObjectId(bulkOperation) {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n  return false;\n}\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n  var currentOp = bulkOp.s.currentOp;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":null,"metadata":{},"sourceType":"script"}